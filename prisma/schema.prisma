// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Stage {
  zero
  one
  two
  three
  model
  final
}

enum Status {
  pending
  approved
  rejected
}

// admin.prisma
model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  staffId   String    @db.ObjectId
  staff     Staff     @relation(fields: [staffId], references: [id])
  students  Student[]
  review    Review[]
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  reviewZero  Zero[]
  reviewOne   One[]
  reviewTwo   Two[]
  reviewThree Three[]
  reviewModel Model[]
  reviewFinal Final[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String   @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id])
}

// staff.prisma
model Staff {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  email           String    @unique
  password        String
  profileImg      Bytes
  specializations String?
  projects        Project[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// student.prisma
model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  regNo     String   @unique
  email     String   @unique
  batch     String
  password  String
  phoneNo   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String?  @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id])
}

model Zero {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage    @default(zero)
  status    Status   @default(pending)
  marks     String?  @default("N/A")
  comments  String?  @default("N/A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String @db.ObjectId
  Review   Review @relation(fields: [reviewId], references: [id])
}

model One {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage    @default(one)
  status    Status   @default(pending)
  marks     String?  @default("N/A")
  comments  String?  @default("N/A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String @db.ObjectId
  Review   Review @relation(fields: [reviewId], references: [id])
}

model Two {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage    @default(two)
  status    Status   @default(pending)
  marks     String?  @default("N/A")
  comments  String?  @default("N/A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String @db.ObjectId
  Review   Review @relation(fields: [reviewId], references: [id])
}

model Three {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage    @default(three)
  status    Status   @default(pending)
  marks     String?  @default("N/A")
  comments  String?  @default("N/A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String @db.ObjectId
  Review   Review @relation(fields: [reviewId], references: [id])
}

model Model {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage    @default(model)
  status    Status   @default(pending)
  marks     String?  @default("N/A")
  comments  String?  @default("N/A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String @db.ObjectId
  Review   Review @relation(fields: [reviewId], references: [id])
}

model Final {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  stage     Stage    @default(final)
  status    Status   @default(pending)
  marks     String?  @default("N/A")
  comments  String?  @default("N/A")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String @db.ObjectId
  Review   Review @relation(fields: [reviewId], references: [id])
}
