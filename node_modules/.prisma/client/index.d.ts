
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Staff
 * 
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Zero
 * 
 */
export type Zero = $Result.DefaultSelection<Prisma.$ZeroPayload>
/**
 * Model One
 * 
 */
export type One = $Result.DefaultSelection<Prisma.$OnePayload>
/**
 * Model Two
 * 
 */
export type Two = $Result.DefaultSelection<Prisma.$TwoPayload>
/**
 * Model Three
 * 
 */
export type Three = $Result.DefaultSelection<Prisma.$ThreePayload>
/**
 * Model Model
 * 
 */
export type Model = $Result.DefaultSelection<Prisma.$ModelPayload>
/**
 * Model Final
 * 
 */
export type Final = $Result.DefaultSelection<Prisma.$FinalPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Stage: {
  zero: 'zero',
  one: 'one',
  two: 'two',
  three: 'three',
  model: 'model',
  final: 'final'
};

export type Stage = (typeof Stage)[keyof typeof Stage]


export const Status: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Stage = $Enums.Stage

export const Stage: typeof $Enums.Stage

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.zero`: Exposes CRUD operations for the **Zero** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Zeros
    * const zeros = await prisma.zero.findMany()
    * ```
    */
  get zero(): Prisma.ZeroDelegate<ExtArgs>;

  /**
   * `prisma.one`: Exposes CRUD operations for the **One** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ones
    * const ones = await prisma.one.findMany()
    * ```
    */
  get one(): Prisma.OneDelegate<ExtArgs>;

  /**
   * `prisma.two`: Exposes CRUD operations for the **Two** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Twos
    * const twos = await prisma.two.findMany()
    * ```
    */
  get two(): Prisma.TwoDelegate<ExtArgs>;

  /**
   * `prisma.three`: Exposes CRUD operations for the **Three** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threes
    * const threes = await prisma.three.findMany()
    * ```
    */
  get three(): Prisma.ThreeDelegate<ExtArgs>;

  /**
   * `prisma.model`: Exposes CRUD operations for the **Model** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Models
    * const models = await prisma.model.findMany()
    * ```
    */
  get model(): Prisma.ModelDelegate<ExtArgs>;

  /**
   * `prisma.final`: Exposes CRUD operations for the **Final** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Finals
    * const finals = await prisma.final.findMany()
    * ```
    */
  get final(): Prisma.FinalDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Project: 'Project',
    Review: 'Review',
    Staff: 'Staff',
    Student: 'Student',
    Zero: 'Zero',
    One: 'One',
    Two: 'Two',
    Three: 'Three',
    Model: 'Model',
    Final: 'Final'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'admin' | 'project' | 'review' | 'staff' | 'student' | 'zero' | 'one' | 'two' | 'three' | 'model' | 'final'
      txIsolationLevel: never
    },
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AdminFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AdminAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProjectFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProjectAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReviewFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReviewAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.StaffFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.StaffAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>,
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.StudentFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.StudentAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Zero: {
        payload: Prisma.$ZeroPayload<ExtArgs>
        fields: Prisma.ZeroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZeroFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZeroFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>
          }
          findFirst: {
            args: Prisma.ZeroFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZeroFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>
          }
          findMany: {
            args: Prisma.ZeroFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>[]
          }
          create: {
            args: Prisma.ZeroCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>
          }
          createMany: {
            args: Prisma.ZeroCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ZeroDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>
          }
          update: {
            args: Prisma.ZeroUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>
          }
          deleteMany: {
            args: Prisma.ZeroDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ZeroUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ZeroUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ZeroPayload>
          }
          aggregate: {
            args: Prisma.ZeroAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateZero>
          }
          groupBy: {
            args: Prisma.ZeroGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ZeroGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ZeroFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ZeroAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ZeroCountArgs<ExtArgs>,
            result: $Utils.Optional<ZeroCountAggregateOutputType> | number
          }
        }
      }
      One: {
        payload: Prisma.$OnePayload<ExtArgs>
        fields: Prisma.OneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OneFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OneFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>
          }
          findFirst: {
            args: Prisma.OneFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OneFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>
          }
          findMany: {
            args: Prisma.OneFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>[]
          }
          create: {
            args: Prisma.OneCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>
          }
          createMany: {
            args: Prisma.OneCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OneDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>
          }
          update: {
            args: Prisma.OneUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>
          }
          deleteMany: {
            args: Prisma.OneDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OneUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OneUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OnePayload>
          }
          aggregate: {
            args: Prisma.OneAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOne>
          }
          groupBy: {
            args: Prisma.OneGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OneGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.OneFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.OneAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.OneCountArgs<ExtArgs>,
            result: $Utils.Optional<OneCountAggregateOutputType> | number
          }
        }
      }
      Two: {
        payload: Prisma.$TwoPayload<ExtArgs>
        fields: Prisma.TwoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TwoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TwoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>
          }
          findFirst: {
            args: Prisma.TwoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TwoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>
          }
          findMany: {
            args: Prisma.TwoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>[]
          }
          create: {
            args: Prisma.TwoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>
          }
          createMany: {
            args: Prisma.TwoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TwoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>
          }
          update: {
            args: Prisma.TwoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>
          }
          deleteMany: {
            args: Prisma.TwoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TwoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TwoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TwoPayload>
          }
          aggregate: {
            args: Prisma.TwoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTwo>
          }
          groupBy: {
            args: Prisma.TwoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TwoGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TwoFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TwoAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TwoCountArgs<ExtArgs>,
            result: $Utils.Optional<TwoCountAggregateOutputType> | number
          }
        }
      }
      Three: {
        payload: Prisma.$ThreePayload<ExtArgs>
        fields: Prisma.ThreeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThreeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThreeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>
          }
          findFirst: {
            args: Prisma.ThreeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThreeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>
          }
          findMany: {
            args: Prisma.ThreeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>[]
          }
          create: {
            args: Prisma.ThreeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>
          }
          createMany: {
            args: Prisma.ThreeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ThreeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>
          }
          update: {
            args: Prisma.ThreeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>
          }
          deleteMany: {
            args: Prisma.ThreeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThreeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThreeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreePayload>
          }
          aggregate: {
            args: Prisma.ThreeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThree>
          }
          groupBy: {
            args: Prisma.ThreeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThreeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ThreeFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ThreeAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ThreeCountArgs<ExtArgs>,
            result: $Utils.Optional<ThreeCountAggregateOutputType> | number
          }
        }
      }
      Model: {
        payload: Prisma.$ModelPayload<ExtArgs>
        fields: Prisma.ModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          findFirst: {
            args: Prisma.ModelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          findMany: {
            args: Prisma.ModelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>[]
          }
          create: {
            args: Prisma.ModelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          createMany: {
            args: Prisma.ModelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ModelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          update: {
            args: Prisma.ModelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          deleteMany: {
            args: Prisma.ModelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ModelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ModelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          aggregate: {
            args: Prisma.ModelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateModel>
          }
          groupBy: {
            args: Prisma.ModelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ModelGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ModelFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ModelAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ModelCountArgs<ExtArgs>,
            result: $Utils.Optional<ModelCountAggregateOutputType> | number
          }
        }
      }
      Final: {
        payload: Prisma.$FinalPayload<ExtArgs>
        fields: Prisma.FinalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>
          }
          findFirst: {
            args: Prisma.FinalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>
          }
          findMany: {
            args: Prisma.FinalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>[]
          }
          create: {
            args: Prisma.FinalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>
          }
          createMany: {
            args: Prisma.FinalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FinalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>
          }
          update: {
            args: Prisma.FinalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>
          }
          deleteMany: {
            args: Prisma.FinalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FinalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FinalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FinalPayload>
          }
          aggregate: {
            args: Prisma.FinalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFinal>
          }
          groupBy: {
            args: Prisma.FinalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FinalGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.FinalFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.FinalAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.FinalCountArgs<ExtArgs>,
            result: $Utils.Optional<FinalCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    students: number
    review: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | ProjectCountOutputTypeCountStudentsArgs
    review?: boolean | ProjectCountOutputTypeCountReviewArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type ReviewCountOutputType
   */

  export type ReviewCountOutputType = {
    reviewZero: number
    reviewOne: number
    reviewTwo: number
    reviewThree: number
    reviewModel: number
    reviewFinal: number
  }

  export type ReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewZero?: boolean | ReviewCountOutputTypeCountReviewZeroArgs
    reviewOne?: boolean | ReviewCountOutputTypeCountReviewOneArgs
    reviewTwo?: boolean | ReviewCountOutputTypeCountReviewTwoArgs
    reviewThree?: boolean | ReviewCountOutputTypeCountReviewThreeArgs
    reviewModel?: boolean | ReviewCountOutputTypeCountReviewModelArgs
    reviewFinal?: boolean | ReviewCountOutputTypeCountReviewFinalArgs
  }

  // Custom InputTypes
  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewCountOutputType
     */
    select?: ReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewZeroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZeroWhereInput
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewOneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OneWhereInput
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewTwoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TwoWhereInput
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewThreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreeWhereInput
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewModelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModelWhereInput
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewFinalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinalWhereInput
  }


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    projects: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | StaffCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    fullName: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }



  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * @param {AdminFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const admin = await prisma.admin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdminFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Admin.
     * @param {AdminAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const admin = await prisma.admin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdminAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly fullName: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin findRaw
   */
  export type AdminFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Admin aggregateRaw
   */
  export type AdminAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
    staffId: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
    staffId: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    staffId: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    staffId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    staffId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    staffId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    title: string
    createdAt: Date
    updatedAt: Date
    staffId: string
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staffId?: boolean
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    students?: boolean | Project$studentsArgs<ExtArgs>
    review?: boolean | Project$reviewArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staffId?: boolean
  }


  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    students?: boolean | Project$studentsArgs<ExtArgs>
    review?: boolean | Project$reviewArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs>
      students: Prisma.$StudentPayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      createdAt: Date
      updatedAt: Date
      staffId: string
    }, ExtArgs["result"]["project"]>
    composites: {}
  }


  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {ProjectFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const project = await prisma.project.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ProjectFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Project.
     * @param {ProjectAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const project = await prisma.project.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ProjectAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    students<T extends Project$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    review<T extends Project$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Project$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly title: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly staffId: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project findRaw
   */
  export type ProjectFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project aggregateRaw
   */
  export type ProjectAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project.students
   */
  export type Project$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Project.review
   */
  export type Project$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    projectId: number
    _all: number
  }


  export type ReviewMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    projectId: string
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    reviewZero?: boolean | Review$reviewZeroArgs<ExtArgs>
    reviewOne?: boolean | Review$reviewOneArgs<ExtArgs>
    reviewTwo?: boolean | Review$reviewTwoArgs<ExtArgs>
    reviewThree?: boolean | Review$reviewThreeArgs<ExtArgs>
    reviewModel?: boolean | Review$reviewModelArgs<ExtArgs>
    reviewFinal?: boolean | Review$reviewFinalArgs<ExtArgs>
    project?: boolean | Review$projectArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
  }


  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewZero?: boolean | Review$reviewZeroArgs<ExtArgs>
    reviewOne?: boolean | Review$reviewOneArgs<ExtArgs>
    reviewTwo?: boolean | Review$reviewTwoArgs<ExtArgs>
    reviewThree?: boolean | Review$reviewThreeArgs<ExtArgs>
    reviewModel?: boolean | Review$reviewModelArgs<ExtArgs>
    reviewFinal?: boolean | Review$reviewFinalArgs<ExtArgs>
    project?: boolean | Review$projectArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      reviewZero: Prisma.$ZeroPayload<ExtArgs>[]
      reviewOne: Prisma.$OnePayload<ExtArgs>[]
      reviewTwo: Prisma.$TwoPayload<ExtArgs>[]
      reviewThree: Prisma.$ThreePayload<ExtArgs>[]
      reviewModel: Prisma.$ModelPayload<ExtArgs>[]
      reviewFinal: Prisma.$FinalPayload<ExtArgs>[]
      project: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      projectId: string
    }, ExtArgs["result"]["review"]>
    composites: {}
  }


  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * @param {ReviewFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const review = await prisma.review.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ReviewFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Review.
     * @param {ReviewAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const review = await prisma.review.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ReviewAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    reviewZero<T extends Review$reviewZeroArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewZeroArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviewOne<T extends Review$reviewOneArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewOneArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'findMany'> | Null>;

    reviewTwo<T extends Review$reviewTwoArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewTwoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviewThree<T extends Review$reviewThreeArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewThreeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'findMany'> | Null>;

    reviewModel<T extends Review$reviewModelArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewModelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviewFinal<T extends Review$reviewFinalArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewFinalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'findMany'> | Null>;

    project<T extends Review$projectArgs<ExtArgs> = {}>(args?: Subset<T, Review$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
    readonly projectId: FieldRef<"Review", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }

  /**
   * Review findRaw
   */
  export type ReviewFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Review aggregateRaw
   */
  export type ReviewAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Review.reviewZero
   */
  export type Review$reviewZeroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    where?: ZeroWhereInput
    orderBy?: ZeroOrderByWithRelationInput | ZeroOrderByWithRelationInput[]
    cursor?: ZeroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ZeroScalarFieldEnum | ZeroScalarFieldEnum[]
  }

  /**
   * Review.reviewOne
   */
  export type Review$reviewOneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    where?: OneWhereInput
    orderBy?: OneOrderByWithRelationInput | OneOrderByWithRelationInput[]
    cursor?: OneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OneScalarFieldEnum | OneScalarFieldEnum[]
  }

  /**
   * Review.reviewTwo
   */
  export type Review$reviewTwoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    where?: TwoWhereInput
    orderBy?: TwoOrderByWithRelationInput | TwoOrderByWithRelationInput[]
    cursor?: TwoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TwoScalarFieldEnum | TwoScalarFieldEnum[]
  }

  /**
   * Review.reviewThree
   */
  export type Review$reviewThreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    where?: ThreeWhereInput
    orderBy?: ThreeOrderByWithRelationInput | ThreeOrderByWithRelationInput[]
    cursor?: ThreeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreeScalarFieldEnum | ThreeScalarFieldEnum[]
  }

  /**
   * Review.reviewModel
   */
  export type Review$reviewModelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    where?: ModelWhereInput
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    cursor?: ModelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Review.reviewFinal
   */
  export type Review$reviewFinalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    where?: FinalWhereInput
    orderBy?: FinalOrderByWithRelationInput | FinalOrderByWithRelationInput[]
    cursor?: FinalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinalScalarFieldEnum | FinalScalarFieldEnum[]
  }

  /**
   * Review.project
   */
  export type Review$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    password: string | null
    profileImg: Buffer | null
    specializations: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    password: string | null
    profileImg: Buffer | null
    specializations: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    profileImg: number
    specializations: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profileImg?: true
    specializations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profileImg?: true
    specializations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    profileImg?: true
    specializations?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: string
    fullName: string
    email: string
    password: string
    profileImg: Buffer
    specializations: string | null
    createdAt: Date
    updatedAt: Date
    _count: StaffCountAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profileImg?: boolean
    specializations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projects?: boolean | Staff$projectsArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    profileImg?: boolean
    specializations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | Staff$projectsArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      email: string
      password: string
      profileImg: Buffer
      specializations: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }


  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StaffFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StaffFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StaffFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
    **/
    create<T extends StaffCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StaffCreateArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StaffCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
    **/
    delete<T extends StaffDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StaffUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StaffDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StaffUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
    **/
    upsert<T extends StaffUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>
    ): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Staff that matches the filter.
     * @param {StaffFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const staff = await prisma.staff.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: StaffFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Staff.
     * @param {StaffAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const staff = await prisma.staff.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: StaffAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    projects<T extends Staff$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Staff$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Staff model
   */ 
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'String'>
    readonly fullName: FieldRef<"Staff", 'String'>
    readonly email: FieldRef<"Staff", 'String'>
    readonly password: FieldRef<"Staff", 'String'>
    readonly profileImg: FieldRef<"Staff", 'Bytes'>
    readonly specializations: FieldRef<"Staff", 'String'>
    readonly createdAt: FieldRef<"Staff", 'DateTime'>
    readonly updatedAt: FieldRef<"Staff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
  }

  /**
   * Staff findRaw
   */
  export type StaffFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Staff aggregateRaw
   */
  export type StaffAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Staff.projects
   */
  export type Staff$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    regNo: string | null
    email: string | null
    batch: string | null
    password: string | null
    phoneNo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    regNo: string | null
    email: string | null
    batch: string | null
    password: string | null
    phoneNo: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    fullName: number
    regNo: number
    email: number
    batch: number
    password: number
    phoneNo: number
    createdAt: number
    updatedAt: number
    projectId: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    id?: true
    fullName?: true
    regNo?: true
    email?: true
    batch?: true
    password?: true
    phoneNo?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    fullName?: true
    regNo?: true
    email?: true
    batch?: true
    password?: true
    phoneNo?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    fullName?: true
    regNo?: true
    email?: true
    batch?: true
    password?: true
    phoneNo?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt: Date
    updatedAt: Date
    projectId: string | null
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    regNo?: boolean
    email?: boolean
    batch?: boolean
    password?: boolean
    phoneNo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | Student$projectArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    fullName?: boolean
    regNo?: boolean
    email?: boolean
    batch?: boolean
    password?: boolean
    phoneNo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
  }


  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Student$projectArgs<ExtArgs>
  }


  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      regNo: string
      email: string
      batch: string
      password: string
      phoneNo: string
      createdAt: Date
      updatedAt: Date
      projectId: string | null
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentCreateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StudentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * @param {StudentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const student = await prisma.student.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: StudentFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Student.
     * @param {StudentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const student = await prisma.student.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: StudentAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    project<T extends Student$projectArgs<ExtArgs> = {}>(args?: Subset<T, Student$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly fullName: FieldRef<"Student", 'String'>
    readonly regNo: FieldRef<"Student", 'String'>
    readonly email: FieldRef<"Student", 'String'>
    readonly batch: FieldRef<"Student", 'String'>
    readonly password: FieldRef<"Student", 'String'>
    readonly phoneNo: FieldRef<"Student", 'String'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
    readonly projectId: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student findRaw
   */
  export type StudentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Student aggregateRaw
   */
  export type StudentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Student.project
   */
  export type Student$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Zero
   */

  export type AggregateZero = {
    _count: ZeroCountAggregateOutputType | null
    _min: ZeroMinAggregateOutputType | null
    _max: ZeroMaxAggregateOutputType | null
  }

  export type ZeroMinAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type ZeroMaxAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type ZeroCountAggregateOutputType = {
    id: number
    stage: number
    status: number
    marks: number
    comments: number
    createdAt: number
    updatedAt: number
    reviewId: number
    _all: number
  }


  export type ZeroMinAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type ZeroMaxAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type ZeroCountAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
    _all?: true
  }

  export type ZeroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zero to aggregate.
     */
    where?: ZeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zeros to fetch.
     */
    orderBy?: ZeroOrderByWithRelationInput | ZeroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zeros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zeros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Zeros
    **/
    _count?: true | ZeroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZeroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZeroMaxAggregateInputType
  }

  export type GetZeroAggregateType<T extends ZeroAggregateArgs> = {
        [P in keyof T & keyof AggregateZero]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZero[P]>
      : GetScalarType<T[P], AggregateZero[P]>
  }




  export type ZeroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZeroWhereInput
    orderBy?: ZeroOrderByWithAggregationInput | ZeroOrderByWithAggregationInput[]
    by: ZeroScalarFieldEnum[] | ZeroScalarFieldEnum
    having?: ZeroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZeroCountAggregateInputType | true
    _min?: ZeroMinAggregateInputType
    _max?: ZeroMaxAggregateInputType
  }

  export type ZeroGroupByOutputType = {
    id: string
    stage: $Enums.Stage
    status: $Enums.Status
    marks: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    reviewId: string
    _count: ZeroCountAggregateOutputType | null
    _min: ZeroMinAggregateOutputType | null
    _max: ZeroMaxAggregateOutputType | null
  }

  type GetZeroGroupByPayload<T extends ZeroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZeroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZeroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZeroGroupByOutputType[P]>
            : GetScalarType<T[P], ZeroGroupByOutputType[P]>
        }
      >
    >


  export type ZeroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zero"]>

  export type ZeroSelectScalar = {
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
  }


  export type ZeroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }


  export type $ZeroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Zero"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stage: $Enums.Stage
      status: $Enums.Status
      marks: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      reviewId: string
    }, ExtArgs["result"]["zero"]>
    composites: {}
  }


  type ZeroGetPayload<S extends boolean | null | undefined | ZeroDefaultArgs> = $Result.GetResult<Prisma.$ZeroPayload, S>

  type ZeroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ZeroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ZeroCountAggregateInputType | true
    }

  export interface ZeroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Zero'], meta: { name: 'Zero' } }
    /**
     * Find zero or one Zero that matches the filter.
     * @param {ZeroFindUniqueArgs} args - Arguments to find a Zero
     * @example
     * // Get one Zero
     * const zero = await prisma.zero.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ZeroFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ZeroFindUniqueArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Zero that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ZeroFindUniqueOrThrowArgs} args - Arguments to find a Zero
     * @example
     * // Get one Zero
     * const zero = await prisma.zero.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ZeroFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ZeroFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Zero that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroFindFirstArgs} args - Arguments to find a Zero
     * @example
     * // Get one Zero
     * const zero = await prisma.zero.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ZeroFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ZeroFindFirstArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Zero that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroFindFirstOrThrowArgs} args - Arguments to find a Zero
     * @example
     * // Get one Zero
     * const zero = await prisma.zero.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ZeroFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ZeroFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Zeros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Zeros
     * const zeros = await prisma.zero.findMany()
     * 
     * // Get first 10 Zeros
     * const zeros = await prisma.zero.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zeroWithIdOnly = await prisma.zero.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ZeroFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ZeroFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Zero.
     * @param {ZeroCreateArgs} args - Arguments to create a Zero.
     * @example
     * // Create one Zero
     * const Zero = await prisma.zero.create({
     *   data: {
     *     // ... data to create a Zero
     *   }
     * })
     * 
    **/
    create<T extends ZeroCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ZeroCreateArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Zeros.
     * @param {ZeroCreateManyArgs} args - Arguments to create many Zeros.
     * @example
     * // Create many Zeros
     * const zero = await prisma.zero.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ZeroCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ZeroCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Zero.
     * @param {ZeroDeleteArgs} args - Arguments to delete one Zero.
     * @example
     * // Delete one Zero
     * const Zero = await prisma.zero.delete({
     *   where: {
     *     // ... filter to delete one Zero
     *   }
     * })
     * 
    **/
    delete<T extends ZeroDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ZeroDeleteArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Zero.
     * @param {ZeroUpdateArgs} args - Arguments to update one Zero.
     * @example
     * // Update one Zero
     * const zero = await prisma.zero.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ZeroUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ZeroUpdateArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Zeros.
     * @param {ZeroDeleteManyArgs} args - Arguments to filter Zeros to delete.
     * @example
     * // Delete a few Zeros
     * const { count } = await prisma.zero.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ZeroDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ZeroDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zeros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Zeros
     * const zero = await prisma.zero.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ZeroUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ZeroUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Zero.
     * @param {ZeroUpsertArgs} args - Arguments to update or create a Zero.
     * @example
     * // Update or create a Zero
     * const zero = await prisma.zero.upsert({
     *   create: {
     *     // ... data to create a Zero
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Zero we want to update
     *   }
     * })
    **/
    upsert<T extends ZeroUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ZeroUpsertArgs<ExtArgs>>
    ): Prisma__ZeroClient<$Result.GetResult<Prisma.$ZeroPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Zeros that matches the filter.
     * @param {ZeroFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const zero = await prisma.zero.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ZeroFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Zero.
     * @param {ZeroAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const zero = await prisma.zero.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ZeroAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Zeros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroCountArgs} args - Arguments to filter Zeros to count.
     * @example
     * // Count the number of Zeros
     * const count = await prisma.zero.count({
     *   where: {
     *     // ... the filter for the Zeros we want to count
     *   }
     * })
    **/
    count<T extends ZeroCountArgs>(
      args?: Subset<T, ZeroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZeroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Zero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZeroAggregateArgs>(args: Subset<T, ZeroAggregateArgs>): Prisma.PrismaPromise<GetZeroAggregateType<T>>

    /**
     * Group by Zero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZeroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZeroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZeroGroupByArgs['orderBy'] }
        : { orderBy?: ZeroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZeroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZeroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Zero model
   */
  readonly fields: ZeroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Zero.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZeroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Zero model
   */ 
  interface ZeroFieldRefs {
    readonly id: FieldRef<"Zero", 'String'>
    readonly stage: FieldRef<"Zero", 'Stage'>
    readonly status: FieldRef<"Zero", 'Status'>
    readonly marks: FieldRef<"Zero", 'String'>
    readonly comments: FieldRef<"Zero", 'String'>
    readonly createdAt: FieldRef<"Zero", 'DateTime'>
    readonly updatedAt: FieldRef<"Zero", 'DateTime'>
    readonly reviewId: FieldRef<"Zero", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Zero findUnique
   */
  export type ZeroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * Filter, which Zero to fetch.
     */
    where: ZeroWhereUniqueInput
  }

  /**
   * Zero findUniqueOrThrow
   */
  export type ZeroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * Filter, which Zero to fetch.
     */
    where: ZeroWhereUniqueInput
  }

  /**
   * Zero findFirst
   */
  export type ZeroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * Filter, which Zero to fetch.
     */
    where?: ZeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zeros to fetch.
     */
    orderBy?: ZeroOrderByWithRelationInput | ZeroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zeros.
     */
    cursor?: ZeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zeros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zeros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zeros.
     */
    distinct?: ZeroScalarFieldEnum | ZeroScalarFieldEnum[]
  }

  /**
   * Zero findFirstOrThrow
   */
  export type ZeroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * Filter, which Zero to fetch.
     */
    where?: ZeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zeros to fetch.
     */
    orderBy?: ZeroOrderByWithRelationInput | ZeroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zeros.
     */
    cursor?: ZeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zeros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zeros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zeros.
     */
    distinct?: ZeroScalarFieldEnum | ZeroScalarFieldEnum[]
  }

  /**
   * Zero findMany
   */
  export type ZeroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * Filter, which Zeros to fetch.
     */
    where?: ZeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zeros to fetch.
     */
    orderBy?: ZeroOrderByWithRelationInput | ZeroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Zeros.
     */
    cursor?: ZeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zeros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zeros.
     */
    skip?: number
    distinct?: ZeroScalarFieldEnum | ZeroScalarFieldEnum[]
  }

  /**
   * Zero create
   */
  export type ZeroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * The data needed to create a Zero.
     */
    data: XOR<ZeroCreateInput, ZeroUncheckedCreateInput>
  }

  /**
   * Zero createMany
   */
  export type ZeroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Zeros.
     */
    data: ZeroCreateManyInput | ZeroCreateManyInput[]
  }

  /**
   * Zero update
   */
  export type ZeroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * The data needed to update a Zero.
     */
    data: XOR<ZeroUpdateInput, ZeroUncheckedUpdateInput>
    /**
     * Choose, which Zero to update.
     */
    where: ZeroWhereUniqueInput
  }

  /**
   * Zero updateMany
   */
  export type ZeroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Zeros.
     */
    data: XOR<ZeroUpdateManyMutationInput, ZeroUncheckedUpdateManyInput>
    /**
     * Filter which Zeros to update
     */
    where?: ZeroWhereInput
  }

  /**
   * Zero upsert
   */
  export type ZeroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * The filter to search for the Zero to update in case it exists.
     */
    where: ZeroWhereUniqueInput
    /**
     * In case the Zero found by the `where` argument doesn't exist, create a new Zero with this data.
     */
    create: XOR<ZeroCreateInput, ZeroUncheckedCreateInput>
    /**
     * In case the Zero was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZeroUpdateInput, ZeroUncheckedUpdateInput>
  }

  /**
   * Zero delete
   */
  export type ZeroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
    /**
     * Filter which Zero to delete.
     */
    where: ZeroWhereUniqueInput
  }

  /**
   * Zero deleteMany
   */
  export type ZeroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zeros to delete
     */
    where?: ZeroWhereInput
  }

  /**
   * Zero findRaw
   */
  export type ZeroFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Zero aggregateRaw
   */
  export type ZeroAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Zero without action
   */
  export type ZeroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zero
     */
    select?: ZeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZeroInclude<ExtArgs> | null
  }


  /**
   * Model One
   */

  export type AggregateOne = {
    _count: OneCountAggregateOutputType | null
    _min: OneMinAggregateOutputType | null
    _max: OneMaxAggregateOutputType | null
  }

  export type OneMinAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type OneMaxAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type OneCountAggregateOutputType = {
    id: number
    stage: number
    status: number
    marks: number
    comments: number
    createdAt: number
    updatedAt: number
    reviewId: number
    _all: number
  }


  export type OneMinAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type OneMaxAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type OneCountAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
    _all?: true
  }

  export type OneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which One to aggregate.
     */
    where?: OneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ones to fetch.
     */
    orderBy?: OneOrderByWithRelationInput | OneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ones
    **/
    _count?: true | OneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OneMaxAggregateInputType
  }

  export type GetOneAggregateType<T extends OneAggregateArgs> = {
        [P in keyof T & keyof AggregateOne]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOne[P]>
      : GetScalarType<T[P], AggregateOne[P]>
  }




  export type OneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OneWhereInput
    orderBy?: OneOrderByWithAggregationInput | OneOrderByWithAggregationInput[]
    by: OneScalarFieldEnum[] | OneScalarFieldEnum
    having?: OneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OneCountAggregateInputType | true
    _min?: OneMinAggregateInputType
    _max?: OneMaxAggregateInputType
  }

  export type OneGroupByOutputType = {
    id: string
    stage: $Enums.Stage
    status: $Enums.Status
    marks: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    reviewId: string
    _count: OneCountAggregateOutputType | null
    _min: OneMinAggregateOutputType | null
    _max: OneMaxAggregateOutputType | null
  }

  type GetOneGroupByPayload<T extends OneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OneGroupByOutputType[P]>
            : GetScalarType<T[P], OneGroupByOutputType[P]>
        }
      >
    >


  export type OneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["one"]>

  export type OneSelectScalar = {
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
  }


  export type OneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }


  export type $OnePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "One"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stage: $Enums.Stage
      status: $Enums.Status
      marks: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      reviewId: string
    }, ExtArgs["result"]["one"]>
    composites: {}
  }


  type OneGetPayload<S extends boolean | null | undefined | OneDefaultArgs> = $Result.GetResult<Prisma.$OnePayload, S>

  type OneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OneFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OneCountAggregateInputType | true
    }

  export interface OneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['One'], meta: { name: 'One' } }
    /**
     * Find zero or one One that matches the filter.
     * @param {OneFindUniqueArgs} args - Arguments to find a One
     * @example
     * // Get one One
     * const one = await prisma.one.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OneFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OneFindUniqueArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one One that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OneFindUniqueOrThrowArgs} args - Arguments to find a One
     * @example
     * // Get one One
     * const one = await prisma.one.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OneFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OneFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first One that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneFindFirstArgs} args - Arguments to find a One
     * @example
     * // Get one One
     * const one = await prisma.one.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OneFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OneFindFirstArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first One that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneFindFirstOrThrowArgs} args - Arguments to find a One
     * @example
     * // Get one One
     * const one = await prisma.one.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OneFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OneFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ones
     * const ones = await prisma.one.findMany()
     * 
     * // Get first 10 Ones
     * const ones = await prisma.one.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oneWithIdOnly = await prisma.one.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OneFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OneFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a One.
     * @param {OneCreateArgs} args - Arguments to create a One.
     * @example
     * // Create one One
     * const One = await prisma.one.create({
     *   data: {
     *     // ... data to create a One
     *   }
     * })
     * 
    **/
    create<T extends OneCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OneCreateArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ones.
     * @param {OneCreateManyArgs} args - Arguments to create many Ones.
     * @example
     * // Create many Ones
     * const one = await prisma.one.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends OneCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OneCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a One.
     * @param {OneDeleteArgs} args - Arguments to delete one One.
     * @example
     * // Delete one One
     * const One = await prisma.one.delete({
     *   where: {
     *     // ... filter to delete one One
     *   }
     * })
     * 
    **/
    delete<T extends OneDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OneDeleteArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one One.
     * @param {OneUpdateArgs} args - Arguments to update one One.
     * @example
     * // Update one One
     * const one = await prisma.one.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OneUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OneUpdateArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ones.
     * @param {OneDeleteManyArgs} args - Arguments to filter Ones to delete.
     * @example
     * // Delete a few Ones
     * const { count } = await prisma.one.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OneDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OneDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ones
     * const one = await prisma.one.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OneUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OneUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one One.
     * @param {OneUpsertArgs} args - Arguments to update or create a One.
     * @example
     * // Update or create a One
     * const one = await prisma.one.upsert({
     *   create: {
     *     // ... data to create a One
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the One we want to update
     *   }
     * })
    **/
    upsert<T extends OneUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OneUpsertArgs<ExtArgs>>
    ): Prisma__OneClient<$Result.GetResult<Prisma.$OnePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Ones that matches the filter.
     * @param {OneFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const one = await prisma.one.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: OneFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a One.
     * @param {OneAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const one = await prisma.one.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: OneAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Ones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneCountArgs} args - Arguments to filter Ones to count.
     * @example
     * // Count the number of Ones
     * const count = await prisma.one.count({
     *   where: {
     *     // ... the filter for the Ones we want to count
     *   }
     * })
    **/
    count<T extends OneCountArgs>(
      args?: Subset<T, OneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a One.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OneAggregateArgs>(args: Subset<T, OneAggregateArgs>): Prisma.PrismaPromise<GetOneAggregateType<T>>

    /**
     * Group by One.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OneGroupByArgs['orderBy'] }
        : { orderBy?: OneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the One model
   */
  readonly fields: OneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for One.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the One model
   */ 
  interface OneFieldRefs {
    readonly id: FieldRef<"One", 'String'>
    readonly stage: FieldRef<"One", 'Stage'>
    readonly status: FieldRef<"One", 'Status'>
    readonly marks: FieldRef<"One", 'String'>
    readonly comments: FieldRef<"One", 'String'>
    readonly createdAt: FieldRef<"One", 'DateTime'>
    readonly updatedAt: FieldRef<"One", 'DateTime'>
    readonly reviewId: FieldRef<"One", 'String'>
  }
    

  // Custom InputTypes
  /**
   * One findUnique
   */
  export type OneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * Filter, which One to fetch.
     */
    where: OneWhereUniqueInput
  }

  /**
   * One findUniqueOrThrow
   */
  export type OneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * Filter, which One to fetch.
     */
    where: OneWhereUniqueInput
  }

  /**
   * One findFirst
   */
  export type OneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * Filter, which One to fetch.
     */
    where?: OneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ones to fetch.
     */
    orderBy?: OneOrderByWithRelationInput | OneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ones.
     */
    cursor?: OneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ones.
     */
    distinct?: OneScalarFieldEnum | OneScalarFieldEnum[]
  }

  /**
   * One findFirstOrThrow
   */
  export type OneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * Filter, which One to fetch.
     */
    where?: OneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ones to fetch.
     */
    orderBy?: OneOrderByWithRelationInput | OneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ones.
     */
    cursor?: OneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ones.
     */
    distinct?: OneScalarFieldEnum | OneScalarFieldEnum[]
  }

  /**
   * One findMany
   */
  export type OneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * Filter, which Ones to fetch.
     */
    where?: OneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ones to fetch.
     */
    orderBy?: OneOrderByWithRelationInput | OneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ones.
     */
    cursor?: OneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ones.
     */
    skip?: number
    distinct?: OneScalarFieldEnum | OneScalarFieldEnum[]
  }

  /**
   * One create
   */
  export type OneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * The data needed to create a One.
     */
    data: XOR<OneCreateInput, OneUncheckedCreateInput>
  }

  /**
   * One createMany
   */
  export type OneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ones.
     */
    data: OneCreateManyInput | OneCreateManyInput[]
  }

  /**
   * One update
   */
  export type OneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * The data needed to update a One.
     */
    data: XOR<OneUpdateInput, OneUncheckedUpdateInput>
    /**
     * Choose, which One to update.
     */
    where: OneWhereUniqueInput
  }

  /**
   * One updateMany
   */
  export type OneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ones.
     */
    data: XOR<OneUpdateManyMutationInput, OneUncheckedUpdateManyInput>
    /**
     * Filter which Ones to update
     */
    where?: OneWhereInput
  }

  /**
   * One upsert
   */
  export type OneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * The filter to search for the One to update in case it exists.
     */
    where: OneWhereUniqueInput
    /**
     * In case the One found by the `where` argument doesn't exist, create a new One with this data.
     */
    create: XOR<OneCreateInput, OneUncheckedCreateInput>
    /**
     * In case the One was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OneUpdateInput, OneUncheckedUpdateInput>
  }

  /**
   * One delete
   */
  export type OneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
    /**
     * Filter which One to delete.
     */
    where: OneWhereUniqueInput
  }

  /**
   * One deleteMany
   */
  export type OneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ones to delete
     */
    where?: OneWhereInput
  }

  /**
   * One findRaw
   */
  export type OneFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * One aggregateRaw
   */
  export type OneAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * One without action
   */
  export type OneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the One
     */
    select?: OneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OneInclude<ExtArgs> | null
  }


  /**
   * Model Two
   */

  export type AggregateTwo = {
    _count: TwoCountAggregateOutputType | null
    _min: TwoMinAggregateOutputType | null
    _max: TwoMaxAggregateOutputType | null
  }

  export type TwoMinAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type TwoMaxAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type TwoCountAggregateOutputType = {
    id: number
    stage: number
    status: number
    marks: number
    comments: number
    createdAt: number
    updatedAt: number
    reviewId: number
    _all: number
  }


  export type TwoMinAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type TwoMaxAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type TwoCountAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
    _all?: true
  }

  export type TwoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Two to aggregate.
     */
    where?: TwoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Twos to fetch.
     */
    orderBy?: TwoOrderByWithRelationInput | TwoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Twos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Twos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Twos
    **/
    _count?: true | TwoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwoMaxAggregateInputType
  }

  export type GetTwoAggregateType<T extends TwoAggregateArgs> = {
        [P in keyof T & keyof AggregateTwo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwo[P]>
      : GetScalarType<T[P], AggregateTwo[P]>
  }




  export type TwoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TwoWhereInput
    orderBy?: TwoOrderByWithAggregationInput | TwoOrderByWithAggregationInput[]
    by: TwoScalarFieldEnum[] | TwoScalarFieldEnum
    having?: TwoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwoCountAggregateInputType | true
    _min?: TwoMinAggregateInputType
    _max?: TwoMaxAggregateInputType
  }

  export type TwoGroupByOutputType = {
    id: string
    stage: $Enums.Stage
    status: $Enums.Status
    marks: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    reviewId: string
    _count: TwoCountAggregateOutputType | null
    _min: TwoMinAggregateOutputType | null
    _max: TwoMaxAggregateOutputType | null
  }

  type GetTwoGroupByPayload<T extends TwoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TwoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwoGroupByOutputType[P]>
            : GetScalarType<T[P], TwoGroupByOutputType[P]>
        }
      >
    >


  export type TwoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["two"]>

  export type TwoSelectScalar = {
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
  }


  export type TwoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }


  export type $TwoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Two"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stage: $Enums.Stage
      status: $Enums.Status
      marks: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      reviewId: string
    }, ExtArgs["result"]["two"]>
    composites: {}
  }


  type TwoGetPayload<S extends boolean | null | undefined | TwoDefaultArgs> = $Result.GetResult<Prisma.$TwoPayload, S>

  type TwoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TwoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TwoCountAggregateInputType | true
    }

  export interface TwoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Two'], meta: { name: 'Two' } }
    /**
     * Find zero or one Two that matches the filter.
     * @param {TwoFindUniqueArgs} args - Arguments to find a Two
     * @example
     * // Get one Two
     * const two = await prisma.two.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TwoFindUniqueArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Two that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TwoFindUniqueOrThrowArgs} args - Arguments to find a Two
     * @example
     * // Get one Two
     * const two = await prisma.two.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TwoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Two that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFindFirstArgs} args - Arguments to find a Two
     * @example
     * // Get one Two
     * const two = await prisma.two.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TwoFindFirstArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Two that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFindFirstOrThrowArgs} args - Arguments to find a Two
     * @example
     * // Get one Two
     * const two = await prisma.two.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TwoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Twos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Twos
     * const twos = await prisma.two.findMany()
     * 
     * // Get first 10 Twos
     * const twos = await prisma.two.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twoWithIdOnly = await prisma.two.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TwoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Two.
     * @param {TwoCreateArgs} args - Arguments to create a Two.
     * @example
     * // Create one Two
     * const Two = await prisma.two.create({
     *   data: {
     *     // ... data to create a Two
     *   }
     * })
     * 
    **/
    create<T extends TwoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TwoCreateArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Twos.
     * @param {TwoCreateManyArgs} args - Arguments to create many Twos.
     * @example
     * // Create many Twos
     * const two = await prisma.two.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TwoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TwoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Two.
     * @param {TwoDeleteArgs} args - Arguments to delete one Two.
     * @example
     * // Delete one Two
     * const Two = await prisma.two.delete({
     *   where: {
     *     // ... filter to delete one Two
     *   }
     * })
     * 
    **/
    delete<T extends TwoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TwoDeleteArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Two.
     * @param {TwoUpdateArgs} args - Arguments to update one Two.
     * @example
     * // Update one Two
     * const two = await prisma.two.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TwoUpdateArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Twos.
     * @param {TwoDeleteManyArgs} args - Arguments to filter Twos to delete.
     * @example
     * // Delete a few Twos
     * const { count } = await prisma.two.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TwoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Twos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Twos
     * const two = await prisma.two.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TwoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Two.
     * @param {TwoUpsertArgs} args - Arguments to update or create a Two.
     * @example
     * // Update or create a Two
     * const two = await prisma.two.upsert({
     *   create: {
     *     // ... data to create a Two
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Two we want to update
     *   }
     * })
    **/
    upsert<T extends TwoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TwoUpsertArgs<ExtArgs>>
    ): Prisma__TwoClient<$Result.GetResult<Prisma.$TwoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Twos that matches the filter.
     * @param {TwoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const two = await prisma.two.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TwoFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Two.
     * @param {TwoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const two = await prisma.two.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TwoAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Twos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoCountArgs} args - Arguments to filter Twos to count.
     * @example
     * // Count the number of Twos
     * const count = await prisma.two.count({
     *   where: {
     *     // ... the filter for the Twos we want to count
     *   }
     * })
    **/
    count<T extends TwoCountArgs>(
      args?: Subset<T, TwoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Two.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwoAggregateArgs>(args: Subset<T, TwoAggregateArgs>): Prisma.PrismaPromise<GetTwoAggregateType<T>>

    /**
     * Group by Two.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwoGroupByArgs['orderBy'] }
        : { orderBy?: TwoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Two model
   */
  readonly fields: TwoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Two.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TwoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Two model
   */ 
  interface TwoFieldRefs {
    readonly id: FieldRef<"Two", 'String'>
    readonly stage: FieldRef<"Two", 'Stage'>
    readonly status: FieldRef<"Two", 'Status'>
    readonly marks: FieldRef<"Two", 'String'>
    readonly comments: FieldRef<"Two", 'String'>
    readonly createdAt: FieldRef<"Two", 'DateTime'>
    readonly updatedAt: FieldRef<"Two", 'DateTime'>
    readonly reviewId: FieldRef<"Two", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Two findUnique
   */
  export type TwoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * Filter, which Two to fetch.
     */
    where: TwoWhereUniqueInput
  }

  /**
   * Two findUniqueOrThrow
   */
  export type TwoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * Filter, which Two to fetch.
     */
    where: TwoWhereUniqueInput
  }

  /**
   * Two findFirst
   */
  export type TwoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * Filter, which Two to fetch.
     */
    where?: TwoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Twos to fetch.
     */
    orderBy?: TwoOrderByWithRelationInput | TwoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Twos.
     */
    cursor?: TwoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Twos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Twos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Twos.
     */
    distinct?: TwoScalarFieldEnum | TwoScalarFieldEnum[]
  }

  /**
   * Two findFirstOrThrow
   */
  export type TwoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * Filter, which Two to fetch.
     */
    where?: TwoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Twos to fetch.
     */
    orderBy?: TwoOrderByWithRelationInput | TwoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Twos.
     */
    cursor?: TwoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Twos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Twos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Twos.
     */
    distinct?: TwoScalarFieldEnum | TwoScalarFieldEnum[]
  }

  /**
   * Two findMany
   */
  export type TwoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * Filter, which Twos to fetch.
     */
    where?: TwoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Twos to fetch.
     */
    orderBy?: TwoOrderByWithRelationInput | TwoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Twos.
     */
    cursor?: TwoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Twos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Twos.
     */
    skip?: number
    distinct?: TwoScalarFieldEnum | TwoScalarFieldEnum[]
  }

  /**
   * Two create
   */
  export type TwoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * The data needed to create a Two.
     */
    data: XOR<TwoCreateInput, TwoUncheckedCreateInput>
  }

  /**
   * Two createMany
   */
  export type TwoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Twos.
     */
    data: TwoCreateManyInput | TwoCreateManyInput[]
  }

  /**
   * Two update
   */
  export type TwoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * The data needed to update a Two.
     */
    data: XOR<TwoUpdateInput, TwoUncheckedUpdateInput>
    /**
     * Choose, which Two to update.
     */
    where: TwoWhereUniqueInput
  }

  /**
   * Two updateMany
   */
  export type TwoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Twos.
     */
    data: XOR<TwoUpdateManyMutationInput, TwoUncheckedUpdateManyInput>
    /**
     * Filter which Twos to update
     */
    where?: TwoWhereInput
  }

  /**
   * Two upsert
   */
  export type TwoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * The filter to search for the Two to update in case it exists.
     */
    where: TwoWhereUniqueInput
    /**
     * In case the Two found by the `where` argument doesn't exist, create a new Two with this data.
     */
    create: XOR<TwoCreateInput, TwoUncheckedCreateInput>
    /**
     * In case the Two was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwoUpdateInput, TwoUncheckedUpdateInput>
  }

  /**
   * Two delete
   */
  export type TwoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
    /**
     * Filter which Two to delete.
     */
    where: TwoWhereUniqueInput
  }

  /**
   * Two deleteMany
   */
  export type TwoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Twos to delete
     */
    where?: TwoWhereInput
  }

  /**
   * Two findRaw
   */
  export type TwoFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Two aggregateRaw
   */
  export type TwoAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Two without action
   */
  export type TwoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Two
     */
    select?: TwoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TwoInclude<ExtArgs> | null
  }


  /**
   * Model Three
   */

  export type AggregateThree = {
    _count: ThreeCountAggregateOutputType | null
    _min: ThreeMinAggregateOutputType | null
    _max: ThreeMaxAggregateOutputType | null
  }

  export type ThreeMinAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type ThreeMaxAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type ThreeCountAggregateOutputType = {
    id: number
    stage: number
    status: number
    marks: number
    comments: number
    createdAt: number
    updatedAt: number
    reviewId: number
    _all: number
  }


  export type ThreeMinAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type ThreeMaxAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type ThreeCountAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
    _all?: true
  }

  export type ThreeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Three to aggregate.
     */
    where?: ThreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threes to fetch.
     */
    orderBy?: ThreeOrderByWithRelationInput | ThreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Threes
    **/
    _count?: true | ThreeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreeMaxAggregateInputType
  }

  export type GetThreeAggregateType<T extends ThreeAggregateArgs> = {
        [P in keyof T & keyof AggregateThree]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThree[P]>
      : GetScalarType<T[P], AggregateThree[P]>
  }




  export type ThreeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreeWhereInput
    orderBy?: ThreeOrderByWithAggregationInput | ThreeOrderByWithAggregationInput[]
    by: ThreeScalarFieldEnum[] | ThreeScalarFieldEnum
    having?: ThreeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreeCountAggregateInputType | true
    _min?: ThreeMinAggregateInputType
    _max?: ThreeMaxAggregateInputType
  }

  export type ThreeGroupByOutputType = {
    id: string
    stage: $Enums.Stage
    status: $Enums.Status
    marks: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    reviewId: string
    _count: ThreeCountAggregateOutputType | null
    _min: ThreeMinAggregateOutputType | null
    _max: ThreeMaxAggregateOutputType | null
  }

  type GetThreeGroupByPayload<T extends ThreeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThreeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreeGroupByOutputType[P]>
            : GetScalarType<T[P], ThreeGroupByOutputType[P]>
        }
      >
    >


  export type ThreeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["three"]>

  export type ThreeSelectScalar = {
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
  }


  export type ThreeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }


  export type $ThreePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Three"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stage: $Enums.Stage
      status: $Enums.Status
      marks: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      reviewId: string
    }, ExtArgs["result"]["three"]>
    composites: {}
  }


  type ThreeGetPayload<S extends boolean | null | undefined | ThreeDefaultArgs> = $Result.GetResult<Prisma.$ThreePayload, S>

  type ThreeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThreeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThreeCountAggregateInputType | true
    }

  export interface ThreeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Three'], meta: { name: 'Three' } }
    /**
     * Find zero or one Three that matches the filter.
     * @param {ThreeFindUniqueArgs} args - Arguments to find a Three
     * @example
     * // Get one Three
     * const three = await prisma.three.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThreeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThreeFindUniqueArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Three that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThreeFindUniqueOrThrowArgs} args - Arguments to find a Three
     * @example
     * // Get one Three
     * const three = await prisma.three.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThreeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Three that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeFindFirstArgs} args - Arguments to find a Three
     * @example
     * // Get one Three
     * const three = await prisma.three.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThreeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreeFindFirstArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Three that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeFindFirstOrThrowArgs} args - Arguments to find a Three
     * @example
     * // Get one Three
     * const three = await prisma.three.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThreeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Threes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threes
     * const threes = await prisma.three.findMany()
     * 
     * // Get first 10 Threes
     * const threes = await prisma.three.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const threeWithIdOnly = await prisma.three.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThreeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Three.
     * @param {ThreeCreateArgs} args - Arguments to create a Three.
     * @example
     * // Create one Three
     * const Three = await prisma.three.create({
     *   data: {
     *     // ... data to create a Three
     *   }
     * })
     * 
    **/
    create<T extends ThreeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThreeCreateArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Threes.
     * @param {ThreeCreateManyArgs} args - Arguments to create many Threes.
     * @example
     * // Create many Threes
     * const three = await prisma.three.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ThreeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Three.
     * @param {ThreeDeleteArgs} args - Arguments to delete one Three.
     * @example
     * // Delete one Three
     * const Three = await prisma.three.delete({
     *   where: {
     *     // ... filter to delete one Three
     *   }
     * })
     * 
    **/
    delete<T extends ThreeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThreeDeleteArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Three.
     * @param {ThreeUpdateArgs} args - Arguments to update one Three.
     * @example
     * // Update one Three
     * const three = await prisma.three.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThreeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThreeUpdateArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Threes.
     * @param {ThreeDeleteManyArgs} args - Arguments to filter Threes to delete.
     * @example
     * // Delete a few Threes
     * const { count } = await prisma.three.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThreeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threes
     * const three = await prisma.three.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThreeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThreeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Three.
     * @param {ThreeUpsertArgs} args - Arguments to update or create a Three.
     * @example
     * // Update or create a Three
     * const three = await prisma.three.upsert({
     *   create: {
     *     // ... data to create a Three
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Three we want to update
     *   }
     * })
    **/
    upsert<T extends ThreeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThreeUpsertArgs<ExtArgs>>
    ): Prisma__ThreeClient<$Result.GetResult<Prisma.$ThreePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Threes that matches the filter.
     * @param {ThreeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const three = await prisma.three.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ThreeFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Three.
     * @param {ThreeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const three = await prisma.three.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ThreeAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Threes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeCountArgs} args - Arguments to filter Threes to count.
     * @example
     * // Count the number of Threes
     * const count = await prisma.three.count({
     *   where: {
     *     // ... the filter for the Threes we want to count
     *   }
     * })
    **/
    count<T extends ThreeCountArgs>(
      args?: Subset<T, ThreeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Three.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreeAggregateArgs>(args: Subset<T, ThreeAggregateArgs>): Prisma.PrismaPromise<GetThreeAggregateType<T>>

    /**
     * Group by Three.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThreeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThreeGroupByArgs['orderBy'] }
        : { orderBy?: ThreeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThreeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Three model
   */
  readonly fields: ThreeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Three.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThreeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Three model
   */ 
  interface ThreeFieldRefs {
    readonly id: FieldRef<"Three", 'String'>
    readonly stage: FieldRef<"Three", 'Stage'>
    readonly status: FieldRef<"Three", 'Status'>
    readonly marks: FieldRef<"Three", 'String'>
    readonly comments: FieldRef<"Three", 'String'>
    readonly createdAt: FieldRef<"Three", 'DateTime'>
    readonly updatedAt: FieldRef<"Three", 'DateTime'>
    readonly reviewId: FieldRef<"Three", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Three findUnique
   */
  export type ThreeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * Filter, which Three to fetch.
     */
    where: ThreeWhereUniqueInput
  }

  /**
   * Three findUniqueOrThrow
   */
  export type ThreeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * Filter, which Three to fetch.
     */
    where: ThreeWhereUniqueInput
  }

  /**
   * Three findFirst
   */
  export type ThreeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * Filter, which Three to fetch.
     */
    where?: ThreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threes to fetch.
     */
    orderBy?: ThreeOrderByWithRelationInput | ThreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threes.
     */
    cursor?: ThreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threes.
     */
    distinct?: ThreeScalarFieldEnum | ThreeScalarFieldEnum[]
  }

  /**
   * Three findFirstOrThrow
   */
  export type ThreeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * Filter, which Three to fetch.
     */
    where?: ThreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threes to fetch.
     */
    orderBy?: ThreeOrderByWithRelationInput | ThreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threes.
     */
    cursor?: ThreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threes.
     */
    distinct?: ThreeScalarFieldEnum | ThreeScalarFieldEnum[]
  }

  /**
   * Three findMany
   */
  export type ThreeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * Filter, which Threes to fetch.
     */
    where?: ThreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threes to fetch.
     */
    orderBy?: ThreeOrderByWithRelationInput | ThreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Threes.
     */
    cursor?: ThreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threes.
     */
    skip?: number
    distinct?: ThreeScalarFieldEnum | ThreeScalarFieldEnum[]
  }

  /**
   * Three create
   */
  export type ThreeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * The data needed to create a Three.
     */
    data: XOR<ThreeCreateInput, ThreeUncheckedCreateInput>
  }

  /**
   * Three createMany
   */
  export type ThreeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Threes.
     */
    data: ThreeCreateManyInput | ThreeCreateManyInput[]
  }

  /**
   * Three update
   */
  export type ThreeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * The data needed to update a Three.
     */
    data: XOR<ThreeUpdateInput, ThreeUncheckedUpdateInput>
    /**
     * Choose, which Three to update.
     */
    where: ThreeWhereUniqueInput
  }

  /**
   * Three updateMany
   */
  export type ThreeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Threes.
     */
    data: XOR<ThreeUpdateManyMutationInput, ThreeUncheckedUpdateManyInput>
    /**
     * Filter which Threes to update
     */
    where?: ThreeWhereInput
  }

  /**
   * Three upsert
   */
  export type ThreeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * The filter to search for the Three to update in case it exists.
     */
    where: ThreeWhereUniqueInput
    /**
     * In case the Three found by the `where` argument doesn't exist, create a new Three with this data.
     */
    create: XOR<ThreeCreateInput, ThreeUncheckedCreateInput>
    /**
     * In case the Three was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThreeUpdateInput, ThreeUncheckedUpdateInput>
  }

  /**
   * Three delete
   */
  export type ThreeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
    /**
     * Filter which Three to delete.
     */
    where: ThreeWhereUniqueInput
  }

  /**
   * Three deleteMany
   */
  export type ThreeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threes to delete
     */
    where?: ThreeWhereInput
  }

  /**
   * Three findRaw
   */
  export type ThreeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Three aggregateRaw
   */
  export type ThreeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Three without action
   */
  export type ThreeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Three
     */
    select?: ThreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThreeInclude<ExtArgs> | null
  }


  /**
   * Model Model
   */

  export type AggregateModel = {
    _count: ModelCountAggregateOutputType | null
    _min: ModelMinAggregateOutputType | null
    _max: ModelMaxAggregateOutputType | null
  }

  export type ModelMinAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type ModelMaxAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type ModelCountAggregateOutputType = {
    id: number
    stage: number
    status: number
    marks: number
    comments: number
    createdAt: number
    updatedAt: number
    reviewId: number
    _all: number
  }


  export type ModelMinAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type ModelMaxAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type ModelCountAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
    _all?: true
  }

  export type ModelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Model to aggregate.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Models
    **/
    _count?: true | ModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModelMaxAggregateInputType
  }

  export type GetModelAggregateType<T extends ModelAggregateArgs> = {
        [P in keyof T & keyof AggregateModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModel[P]>
      : GetScalarType<T[P], AggregateModel[P]>
  }




  export type ModelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModelWhereInput
    orderBy?: ModelOrderByWithAggregationInput | ModelOrderByWithAggregationInput[]
    by: ModelScalarFieldEnum[] | ModelScalarFieldEnum
    having?: ModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModelCountAggregateInputType | true
    _min?: ModelMinAggregateInputType
    _max?: ModelMaxAggregateInputType
  }

  export type ModelGroupByOutputType = {
    id: string
    stage: $Enums.Stage
    status: $Enums.Status
    marks: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    reviewId: string
    _count: ModelCountAggregateOutputType | null
    _min: ModelMinAggregateOutputType | null
    _max: ModelMaxAggregateOutputType | null
  }

  type GetModelGroupByPayload<T extends ModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModelGroupByOutputType[P]>
            : GetScalarType<T[P], ModelGroupByOutputType[P]>
        }
      >
    >


  export type ModelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["model"]>

  export type ModelSelectScalar = {
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
  }


  export type ModelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }


  export type $ModelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Model"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stage: $Enums.Stage
      status: $Enums.Status
      marks: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      reviewId: string
    }, ExtArgs["result"]["model"]>
    composites: {}
  }


  type ModelGetPayload<S extends boolean | null | undefined | ModelDefaultArgs> = $Result.GetResult<Prisma.$ModelPayload, S>

  type ModelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModelCountAggregateInputType | true
    }

  export interface ModelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Model'], meta: { name: 'Model' } }
    /**
     * Find zero or one Model that matches the filter.
     * @param {ModelFindUniqueArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ModelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ModelFindUniqueArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Model that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModelFindUniqueOrThrowArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ModelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ModelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Model that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindFirstArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ModelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ModelFindFirstArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Model that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindFirstOrThrowArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ModelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ModelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Models that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Models
     * const models = await prisma.model.findMany()
     * 
     * // Get first 10 Models
     * const models = await prisma.model.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modelWithIdOnly = await prisma.model.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ModelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Model.
     * @param {ModelCreateArgs} args - Arguments to create a Model.
     * @example
     * // Create one Model
     * const Model = await prisma.model.create({
     *   data: {
     *     // ... data to create a Model
     *   }
     * })
     * 
    **/
    create<T extends ModelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ModelCreateArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Models.
     * @param {ModelCreateManyArgs} args - Arguments to create many Models.
     * @example
     * // Create many Models
     * const model = await prisma.model.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ModelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Model.
     * @param {ModelDeleteArgs} args - Arguments to delete one Model.
     * @example
     * // Delete one Model
     * const Model = await prisma.model.delete({
     *   where: {
     *     // ... filter to delete one Model
     *   }
     * })
     * 
    **/
    delete<T extends ModelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ModelDeleteArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Model.
     * @param {ModelUpdateArgs} args - Arguments to update one Model.
     * @example
     * // Update one Model
     * const model = await prisma.model.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ModelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ModelUpdateArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Models.
     * @param {ModelDeleteManyArgs} args - Arguments to filter Models to delete.
     * @example
     * // Delete a few Models
     * const { count } = await prisma.model.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ModelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ModelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Models.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Models
     * const model = await prisma.model.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ModelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ModelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Model.
     * @param {ModelUpsertArgs} args - Arguments to update or create a Model.
     * @example
     * // Update or create a Model
     * const model = await prisma.model.upsert({
     *   create: {
     *     // ... data to create a Model
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Model we want to update
     *   }
     * })
    **/
    upsert<T extends ModelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ModelUpsertArgs<ExtArgs>>
    ): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Models that matches the filter.
     * @param {ModelFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const model = await prisma.model.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ModelFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Model.
     * @param {ModelAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const model = await prisma.model.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ModelAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Models.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelCountArgs} args - Arguments to filter Models to count.
     * @example
     * // Count the number of Models
     * const count = await prisma.model.count({
     *   where: {
     *     // ... the filter for the Models we want to count
     *   }
     * })
    **/
    count<T extends ModelCountArgs>(
      args?: Subset<T, ModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Model.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModelAggregateArgs>(args: Subset<T, ModelAggregateArgs>): Prisma.PrismaPromise<GetModelAggregateType<T>>

    /**
     * Group by Model.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModelGroupByArgs['orderBy'] }
        : { orderBy?: ModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Model model
   */
  readonly fields: ModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Model.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Model model
   */ 
  interface ModelFieldRefs {
    readonly id: FieldRef<"Model", 'String'>
    readonly stage: FieldRef<"Model", 'Stage'>
    readonly status: FieldRef<"Model", 'Status'>
    readonly marks: FieldRef<"Model", 'String'>
    readonly comments: FieldRef<"Model", 'String'>
    readonly createdAt: FieldRef<"Model", 'DateTime'>
    readonly updatedAt: FieldRef<"Model", 'DateTime'>
    readonly reviewId: FieldRef<"Model", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Model findUnique
   */
  export type ModelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model findUniqueOrThrow
   */
  export type ModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model findFirst
   */
  export type ModelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Models.
     */
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model findFirstOrThrow
   */
  export type ModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Models.
     */
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model findMany
   */
  export type ModelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Models to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model create
   */
  export type ModelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The data needed to create a Model.
     */
    data: XOR<ModelCreateInput, ModelUncheckedCreateInput>
  }

  /**
   * Model createMany
   */
  export type ModelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Models.
     */
    data: ModelCreateManyInput | ModelCreateManyInput[]
  }

  /**
   * Model update
   */
  export type ModelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The data needed to update a Model.
     */
    data: XOR<ModelUpdateInput, ModelUncheckedUpdateInput>
    /**
     * Choose, which Model to update.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model updateMany
   */
  export type ModelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Models.
     */
    data: XOR<ModelUpdateManyMutationInput, ModelUncheckedUpdateManyInput>
    /**
     * Filter which Models to update
     */
    where?: ModelWhereInput
  }

  /**
   * Model upsert
   */
  export type ModelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The filter to search for the Model to update in case it exists.
     */
    where: ModelWhereUniqueInput
    /**
     * In case the Model found by the `where` argument doesn't exist, create a new Model with this data.
     */
    create: XOR<ModelCreateInput, ModelUncheckedCreateInput>
    /**
     * In case the Model was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModelUpdateInput, ModelUncheckedUpdateInput>
  }

  /**
   * Model delete
   */
  export type ModelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter which Model to delete.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model deleteMany
   */
  export type ModelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Models to delete
     */
    where?: ModelWhereInput
  }

  /**
   * Model findRaw
   */
  export type ModelFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Model aggregateRaw
   */
  export type ModelAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Model without action
   */
  export type ModelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
  }


  /**
   * Model Final
   */

  export type AggregateFinal = {
    _count: FinalCountAggregateOutputType | null
    _min: FinalMinAggregateOutputType | null
    _max: FinalMaxAggregateOutputType | null
  }

  export type FinalMinAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type FinalMaxAggregateOutputType = {
    id: string | null
    stage: $Enums.Stage | null
    status: $Enums.Status | null
    marks: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reviewId: string | null
  }

  export type FinalCountAggregateOutputType = {
    id: number
    stage: number
    status: number
    marks: number
    comments: number
    createdAt: number
    updatedAt: number
    reviewId: number
    _all: number
  }


  export type FinalMinAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type FinalMaxAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
  }

  export type FinalCountAggregateInputType = {
    id?: true
    stage?: true
    status?: true
    marks?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    reviewId?: true
    _all?: true
  }

  export type FinalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Final to aggregate.
     */
    where?: FinalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finals to fetch.
     */
    orderBy?: FinalOrderByWithRelationInput | FinalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Finals
    **/
    _count?: true | FinalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinalMaxAggregateInputType
  }

  export type GetFinalAggregateType<T extends FinalAggregateArgs> = {
        [P in keyof T & keyof AggregateFinal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinal[P]>
      : GetScalarType<T[P], AggregateFinal[P]>
  }




  export type FinalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinalWhereInput
    orderBy?: FinalOrderByWithAggregationInput | FinalOrderByWithAggregationInput[]
    by: FinalScalarFieldEnum[] | FinalScalarFieldEnum
    having?: FinalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinalCountAggregateInputType | true
    _min?: FinalMinAggregateInputType
    _max?: FinalMaxAggregateInputType
  }

  export type FinalGroupByOutputType = {
    id: string
    stage: $Enums.Stage
    status: $Enums.Status
    marks: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    reviewId: string
    _count: FinalCountAggregateOutputType | null
    _min: FinalMinAggregateOutputType | null
    _max: FinalMaxAggregateOutputType | null
  }

  type GetFinalGroupByPayload<T extends FinalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinalGroupByOutputType[P]>
            : GetScalarType<T[P], FinalGroupByOutputType[P]>
        }
      >
    >


  export type FinalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["final"]>

  export type FinalSelectScalar = {
    id?: boolean
    stage?: boolean
    status?: boolean
    marks?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewId?: boolean
  }


  export type FinalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Review?: boolean | ReviewDefaultArgs<ExtArgs>
  }


  export type $FinalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Final"
    objects: {
      Review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stage: $Enums.Stage
      status: $Enums.Status
      marks: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
      reviewId: string
    }, ExtArgs["result"]["final"]>
    composites: {}
  }


  type FinalGetPayload<S extends boolean | null | undefined | FinalDefaultArgs> = $Result.GetResult<Prisma.$FinalPayload, S>

  type FinalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FinalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FinalCountAggregateInputType | true
    }

  export interface FinalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Final'], meta: { name: 'Final' } }
    /**
     * Find zero or one Final that matches the filter.
     * @param {FinalFindUniqueArgs} args - Arguments to find a Final
     * @example
     * // Get one Final
     * const final = await prisma.final.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FinalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FinalFindUniqueArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Final that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FinalFindUniqueOrThrowArgs} args - Arguments to find a Final
     * @example
     * // Get one Final
     * const final = await prisma.final.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FinalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FinalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Final that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalFindFirstArgs} args - Arguments to find a Final
     * @example
     * // Get one Final
     * const final = await prisma.final.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FinalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FinalFindFirstArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Final that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalFindFirstOrThrowArgs} args - Arguments to find a Final
     * @example
     * // Get one Final
     * const final = await prisma.final.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FinalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FinalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Finals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Finals
     * const finals = await prisma.final.findMany()
     * 
     * // Get first 10 Finals
     * const finals = await prisma.final.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const finalWithIdOnly = await prisma.final.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FinalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FinalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Final.
     * @param {FinalCreateArgs} args - Arguments to create a Final.
     * @example
     * // Create one Final
     * const Final = await prisma.final.create({
     *   data: {
     *     // ... data to create a Final
     *   }
     * })
     * 
    **/
    create<T extends FinalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FinalCreateArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Finals.
     * @param {FinalCreateManyArgs} args - Arguments to create many Finals.
     * @example
     * // Create many Finals
     * const final = await prisma.final.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends FinalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FinalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Final.
     * @param {FinalDeleteArgs} args - Arguments to delete one Final.
     * @example
     * // Delete one Final
     * const Final = await prisma.final.delete({
     *   where: {
     *     // ... filter to delete one Final
     *   }
     * })
     * 
    **/
    delete<T extends FinalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FinalDeleteArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Final.
     * @param {FinalUpdateArgs} args - Arguments to update one Final.
     * @example
     * // Update one Final
     * const final = await prisma.final.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FinalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FinalUpdateArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Finals.
     * @param {FinalDeleteManyArgs} args - Arguments to filter Finals to delete.
     * @example
     * // Delete a few Finals
     * const { count } = await prisma.final.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FinalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FinalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Finals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Finals
     * const final = await prisma.final.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FinalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FinalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Final.
     * @param {FinalUpsertArgs} args - Arguments to update or create a Final.
     * @example
     * // Update or create a Final
     * const final = await prisma.final.upsert({
     *   create: {
     *     // ... data to create a Final
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Final we want to update
     *   }
     * })
    **/
    upsert<T extends FinalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FinalUpsertArgs<ExtArgs>>
    ): Prisma__FinalClient<$Result.GetResult<Prisma.$FinalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Finals that matches the filter.
     * @param {FinalFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const final = await prisma.final.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: FinalFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Final.
     * @param {FinalAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const final = await prisma.final.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: FinalAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Finals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalCountArgs} args - Arguments to filter Finals to count.
     * @example
     * // Count the number of Finals
     * const count = await prisma.final.count({
     *   where: {
     *     // ... the filter for the Finals we want to count
     *   }
     * })
    **/
    count<T extends FinalCountArgs>(
      args?: Subset<T, FinalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Final.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinalAggregateArgs>(args: Subset<T, FinalAggregateArgs>): Prisma.PrismaPromise<GetFinalAggregateType<T>>

    /**
     * Group by Final.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinalGroupByArgs['orderBy'] }
        : { orderBy?: FinalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Final model
   */
  readonly fields: FinalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Final.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Final model
   */ 
  interface FinalFieldRefs {
    readonly id: FieldRef<"Final", 'String'>
    readonly stage: FieldRef<"Final", 'Stage'>
    readonly status: FieldRef<"Final", 'Status'>
    readonly marks: FieldRef<"Final", 'String'>
    readonly comments: FieldRef<"Final", 'String'>
    readonly createdAt: FieldRef<"Final", 'DateTime'>
    readonly updatedAt: FieldRef<"Final", 'DateTime'>
    readonly reviewId: FieldRef<"Final", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Final findUnique
   */
  export type FinalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * Filter, which Final to fetch.
     */
    where: FinalWhereUniqueInput
  }

  /**
   * Final findUniqueOrThrow
   */
  export type FinalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * Filter, which Final to fetch.
     */
    where: FinalWhereUniqueInput
  }

  /**
   * Final findFirst
   */
  export type FinalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * Filter, which Final to fetch.
     */
    where?: FinalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finals to fetch.
     */
    orderBy?: FinalOrderByWithRelationInput | FinalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Finals.
     */
    cursor?: FinalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Finals.
     */
    distinct?: FinalScalarFieldEnum | FinalScalarFieldEnum[]
  }

  /**
   * Final findFirstOrThrow
   */
  export type FinalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * Filter, which Final to fetch.
     */
    where?: FinalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finals to fetch.
     */
    orderBy?: FinalOrderByWithRelationInput | FinalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Finals.
     */
    cursor?: FinalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Finals.
     */
    distinct?: FinalScalarFieldEnum | FinalScalarFieldEnum[]
  }

  /**
   * Final findMany
   */
  export type FinalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * Filter, which Finals to fetch.
     */
    where?: FinalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Finals to fetch.
     */
    orderBy?: FinalOrderByWithRelationInput | FinalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Finals.
     */
    cursor?: FinalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Finals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Finals.
     */
    skip?: number
    distinct?: FinalScalarFieldEnum | FinalScalarFieldEnum[]
  }

  /**
   * Final create
   */
  export type FinalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * The data needed to create a Final.
     */
    data: XOR<FinalCreateInput, FinalUncheckedCreateInput>
  }

  /**
   * Final createMany
   */
  export type FinalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Finals.
     */
    data: FinalCreateManyInput | FinalCreateManyInput[]
  }

  /**
   * Final update
   */
  export type FinalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * The data needed to update a Final.
     */
    data: XOR<FinalUpdateInput, FinalUncheckedUpdateInput>
    /**
     * Choose, which Final to update.
     */
    where: FinalWhereUniqueInput
  }

  /**
   * Final updateMany
   */
  export type FinalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Finals.
     */
    data: XOR<FinalUpdateManyMutationInput, FinalUncheckedUpdateManyInput>
    /**
     * Filter which Finals to update
     */
    where?: FinalWhereInput
  }

  /**
   * Final upsert
   */
  export type FinalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * The filter to search for the Final to update in case it exists.
     */
    where: FinalWhereUniqueInput
    /**
     * In case the Final found by the `where` argument doesn't exist, create a new Final with this data.
     */
    create: XOR<FinalCreateInput, FinalUncheckedCreateInput>
    /**
     * In case the Final was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinalUpdateInput, FinalUncheckedUpdateInput>
  }

  /**
   * Final delete
   */
  export type FinalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
    /**
     * Filter which Final to delete.
     */
    where: FinalWhereUniqueInput
  }

  /**
   * Final deleteMany
   */
  export type FinalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Finals to delete
     */
    where?: FinalWhereInput
  }

  /**
   * Final findRaw
   */
  export type FinalFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Final aggregateRaw
   */
  export type FinalAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Final without action
   */
  export type FinalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Final
     */
    select?: FinalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinalInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const AdminScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    staffId: 'staffId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    profileImg: 'profileImg',
    specializations: 'specializations',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    regNo: 'regNo',
    email: 'email',
    batch: 'batch',
    password: 'password',
    phoneNo: 'phoneNo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ZeroScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    status: 'status',
    marks: 'marks',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reviewId: 'reviewId'
  };

  export type ZeroScalarFieldEnum = (typeof ZeroScalarFieldEnum)[keyof typeof ZeroScalarFieldEnum]


  export const OneScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    status: 'status',
    marks: 'marks',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reviewId: 'reviewId'
  };

  export type OneScalarFieldEnum = (typeof OneScalarFieldEnum)[keyof typeof OneScalarFieldEnum]


  export const TwoScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    status: 'status',
    marks: 'marks',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reviewId: 'reviewId'
  };

  export type TwoScalarFieldEnum = (typeof TwoScalarFieldEnum)[keyof typeof TwoScalarFieldEnum]


  export const ThreeScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    status: 'status',
    marks: 'marks',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reviewId: 'reviewId'
  };

  export type ThreeScalarFieldEnum = (typeof ThreeScalarFieldEnum)[keyof typeof ThreeScalarFieldEnum]


  export const ModelScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    status: 'status',
    marks: 'marks',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reviewId: 'reviewId'
  };

  export type ModelScalarFieldEnum = (typeof ModelScalarFieldEnum)[keyof typeof ModelScalarFieldEnum]


  export const FinalScalarFieldEnum: {
    id: 'id',
    stage: 'stage',
    status: 'status',
    marks: 'marks',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reviewId: 'reviewId'
  };

  export type FinalScalarFieldEnum = (typeof FinalScalarFieldEnum)[keyof typeof FinalScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Stage'
   */
  export type EnumStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Stage'>
    


  /**
   * Reference to a field of type 'Stage[]'
   */
  export type ListEnumStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Stage[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    fullName?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    fullName?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    fullName?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    staffId?: StringFilter<"Project"> | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    students?: StudentListRelationFilter
    review?: ReviewListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staffId?: SortOrder
    staff?: StaffOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
    review?: ReviewOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    staffId?: StringFilter<"Project"> | string
    staff?: XOR<StaffRelationFilter, StaffWhereInput>
    students?: StudentListRelationFilter
    review?: ReviewListRelationFilter
  }, "id" | "title">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staffId?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    title?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    staffId?: StringWithAggregatesFilter<"Project"> | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    projectId?: StringFilter<"Review"> | string
    reviewZero?: ZeroListRelationFilter
    reviewOne?: OneListRelationFilter
    reviewTwo?: TwoListRelationFilter
    reviewThree?: ThreeListRelationFilter
    reviewModel?: ModelListRelationFilter
    reviewFinal?: FinalListRelationFilter
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    reviewZero?: ZeroOrderByRelationAggregateInput
    reviewOne?: OneOrderByRelationAggregateInput
    reviewTwo?: TwoOrderByRelationAggregateInput
    reviewThree?: ThreeOrderByRelationAggregateInput
    reviewModel?: ModelOrderByRelationAggregateInput
    reviewFinal?: FinalOrderByRelationAggregateInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    projectId?: StringFilter<"Review"> | string
    reviewZero?: ZeroListRelationFilter
    reviewOne?: OneListRelationFilter
    reviewTwo?: TwoListRelationFilter
    reviewThree?: ThreeListRelationFilter
    reviewModel?: ModelListRelationFilter
    reviewFinal?: FinalListRelationFilter
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    projectId?: StringWithAggregatesFilter<"Review"> | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: StringFilter<"Staff"> | string
    fullName?: StringFilter<"Staff"> | string
    email?: StringFilter<"Staff"> | string
    password?: StringFilter<"Staff"> | string
    profileImg?: BytesFilter<"Staff"> | Buffer
    specializations?: StringNullableFilter<"Staff"> | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    projects?: ProjectListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileImg?: SortOrder
    specializations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    fullName?: StringFilter<"Staff"> | string
    password?: StringFilter<"Staff"> | string
    profileImg?: BytesFilter<"Staff"> | Buffer
    specializations?: StringNullableFilter<"Staff"> | string | null
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    projects?: ProjectListRelationFilter
  }, "id" | "email">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileImg?: SortOrder
    specializations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Staff"> | string
    fullName?: StringWithAggregatesFilter<"Staff"> | string
    email?: StringWithAggregatesFilter<"Staff"> | string
    password?: StringWithAggregatesFilter<"Staff"> | string
    profileImg?: BytesWithAggregatesFilter<"Staff"> | Buffer
    specializations?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    fullName?: StringFilter<"Student"> | string
    regNo?: StringFilter<"Student"> | string
    email?: StringFilter<"Student"> | string
    batch?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    phoneNo?: StringFilter<"Student"> | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    projectId?: StringNullableFilter<"Student"> | string | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    regNo?: SortOrder
    email?: SortOrder
    batch?: SortOrder
    password?: SortOrder
    phoneNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    regNo?: string
    email?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    fullName?: StringFilter<"Student"> | string
    batch?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    phoneNo?: StringFilter<"Student"> | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    projectId?: StringNullableFilter<"Student"> | string | null
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
  }, "id" | "regNo" | "email">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    regNo?: SortOrder
    email?: SortOrder
    batch?: SortOrder
    password?: SortOrder
    phoneNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    fullName?: StringWithAggregatesFilter<"Student"> | string
    regNo?: StringWithAggregatesFilter<"Student"> | string
    email?: StringWithAggregatesFilter<"Student"> | string
    batch?: StringWithAggregatesFilter<"Student"> | string
    password?: StringWithAggregatesFilter<"Student"> | string
    phoneNo?: StringWithAggregatesFilter<"Student"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    projectId?: StringNullableWithAggregatesFilter<"Student"> | string | null
  }

  export type ZeroWhereInput = {
    AND?: ZeroWhereInput | ZeroWhereInput[]
    OR?: ZeroWhereInput[]
    NOT?: ZeroWhereInput | ZeroWhereInput[]
    id?: StringFilter<"Zero"> | string
    stage?: EnumStageFilter<"Zero"> | $Enums.Stage
    status?: EnumStatusFilter<"Zero"> | $Enums.Status
    marks?: StringNullableFilter<"Zero"> | string | null
    comments?: StringNullableFilter<"Zero"> | string | null
    createdAt?: DateTimeFilter<"Zero"> | Date | string
    updatedAt?: DateTimeFilter<"Zero"> | Date | string
    reviewId?: StringFilter<"Zero"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }

  export type ZeroOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    Review?: ReviewOrderByWithRelationInput
  }

  export type ZeroWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ZeroWhereInput | ZeroWhereInput[]
    OR?: ZeroWhereInput[]
    NOT?: ZeroWhereInput | ZeroWhereInput[]
    stage?: EnumStageFilter<"Zero"> | $Enums.Stage
    status?: EnumStatusFilter<"Zero"> | $Enums.Status
    marks?: StringNullableFilter<"Zero"> | string | null
    comments?: StringNullableFilter<"Zero"> | string | null
    createdAt?: DateTimeFilter<"Zero"> | Date | string
    updatedAt?: DateTimeFilter<"Zero"> | Date | string
    reviewId?: StringFilter<"Zero"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }, "id">

  export type ZeroOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    _count?: ZeroCountOrderByAggregateInput
    _max?: ZeroMaxOrderByAggregateInput
    _min?: ZeroMinOrderByAggregateInput
  }

  export type ZeroScalarWhereWithAggregatesInput = {
    AND?: ZeroScalarWhereWithAggregatesInput | ZeroScalarWhereWithAggregatesInput[]
    OR?: ZeroScalarWhereWithAggregatesInput[]
    NOT?: ZeroScalarWhereWithAggregatesInput | ZeroScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Zero"> | string
    stage?: EnumStageWithAggregatesFilter<"Zero"> | $Enums.Stage
    status?: EnumStatusWithAggregatesFilter<"Zero"> | $Enums.Status
    marks?: StringNullableWithAggregatesFilter<"Zero"> | string | null
    comments?: StringNullableWithAggregatesFilter<"Zero"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Zero"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Zero"> | Date | string
    reviewId?: StringWithAggregatesFilter<"Zero"> | string
  }

  export type OneWhereInput = {
    AND?: OneWhereInput | OneWhereInput[]
    OR?: OneWhereInput[]
    NOT?: OneWhereInput | OneWhereInput[]
    id?: StringFilter<"One"> | string
    stage?: EnumStageFilter<"One"> | $Enums.Stage
    status?: EnumStatusFilter<"One"> | $Enums.Status
    marks?: StringNullableFilter<"One"> | string | null
    comments?: StringNullableFilter<"One"> | string | null
    createdAt?: DateTimeFilter<"One"> | Date | string
    updatedAt?: DateTimeFilter<"One"> | Date | string
    reviewId?: StringFilter<"One"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }

  export type OneOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    Review?: ReviewOrderByWithRelationInput
  }

  export type OneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OneWhereInput | OneWhereInput[]
    OR?: OneWhereInput[]
    NOT?: OneWhereInput | OneWhereInput[]
    stage?: EnumStageFilter<"One"> | $Enums.Stage
    status?: EnumStatusFilter<"One"> | $Enums.Status
    marks?: StringNullableFilter<"One"> | string | null
    comments?: StringNullableFilter<"One"> | string | null
    createdAt?: DateTimeFilter<"One"> | Date | string
    updatedAt?: DateTimeFilter<"One"> | Date | string
    reviewId?: StringFilter<"One"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }, "id">

  export type OneOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    _count?: OneCountOrderByAggregateInput
    _max?: OneMaxOrderByAggregateInput
    _min?: OneMinOrderByAggregateInput
  }

  export type OneScalarWhereWithAggregatesInput = {
    AND?: OneScalarWhereWithAggregatesInput | OneScalarWhereWithAggregatesInput[]
    OR?: OneScalarWhereWithAggregatesInput[]
    NOT?: OneScalarWhereWithAggregatesInput | OneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"One"> | string
    stage?: EnumStageWithAggregatesFilter<"One"> | $Enums.Stage
    status?: EnumStatusWithAggregatesFilter<"One"> | $Enums.Status
    marks?: StringNullableWithAggregatesFilter<"One"> | string | null
    comments?: StringNullableWithAggregatesFilter<"One"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"One"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"One"> | Date | string
    reviewId?: StringWithAggregatesFilter<"One"> | string
  }

  export type TwoWhereInput = {
    AND?: TwoWhereInput | TwoWhereInput[]
    OR?: TwoWhereInput[]
    NOT?: TwoWhereInput | TwoWhereInput[]
    id?: StringFilter<"Two"> | string
    stage?: EnumStageFilter<"Two"> | $Enums.Stage
    status?: EnumStatusFilter<"Two"> | $Enums.Status
    marks?: StringNullableFilter<"Two"> | string | null
    comments?: StringNullableFilter<"Two"> | string | null
    createdAt?: DateTimeFilter<"Two"> | Date | string
    updatedAt?: DateTimeFilter<"Two"> | Date | string
    reviewId?: StringFilter<"Two"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }

  export type TwoOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    Review?: ReviewOrderByWithRelationInput
  }

  export type TwoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TwoWhereInput | TwoWhereInput[]
    OR?: TwoWhereInput[]
    NOT?: TwoWhereInput | TwoWhereInput[]
    stage?: EnumStageFilter<"Two"> | $Enums.Stage
    status?: EnumStatusFilter<"Two"> | $Enums.Status
    marks?: StringNullableFilter<"Two"> | string | null
    comments?: StringNullableFilter<"Two"> | string | null
    createdAt?: DateTimeFilter<"Two"> | Date | string
    updatedAt?: DateTimeFilter<"Two"> | Date | string
    reviewId?: StringFilter<"Two"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }, "id">

  export type TwoOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    _count?: TwoCountOrderByAggregateInput
    _max?: TwoMaxOrderByAggregateInput
    _min?: TwoMinOrderByAggregateInput
  }

  export type TwoScalarWhereWithAggregatesInput = {
    AND?: TwoScalarWhereWithAggregatesInput | TwoScalarWhereWithAggregatesInput[]
    OR?: TwoScalarWhereWithAggregatesInput[]
    NOT?: TwoScalarWhereWithAggregatesInput | TwoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Two"> | string
    stage?: EnumStageWithAggregatesFilter<"Two"> | $Enums.Stage
    status?: EnumStatusWithAggregatesFilter<"Two"> | $Enums.Status
    marks?: StringNullableWithAggregatesFilter<"Two"> | string | null
    comments?: StringNullableWithAggregatesFilter<"Two"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Two"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Two"> | Date | string
    reviewId?: StringWithAggregatesFilter<"Two"> | string
  }

  export type ThreeWhereInput = {
    AND?: ThreeWhereInput | ThreeWhereInput[]
    OR?: ThreeWhereInput[]
    NOT?: ThreeWhereInput | ThreeWhereInput[]
    id?: StringFilter<"Three"> | string
    stage?: EnumStageFilter<"Three"> | $Enums.Stage
    status?: EnumStatusFilter<"Three"> | $Enums.Status
    marks?: StringNullableFilter<"Three"> | string | null
    comments?: StringNullableFilter<"Three"> | string | null
    createdAt?: DateTimeFilter<"Three"> | Date | string
    updatedAt?: DateTimeFilter<"Three"> | Date | string
    reviewId?: StringFilter<"Three"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }

  export type ThreeOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    Review?: ReviewOrderByWithRelationInput
  }

  export type ThreeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThreeWhereInput | ThreeWhereInput[]
    OR?: ThreeWhereInput[]
    NOT?: ThreeWhereInput | ThreeWhereInput[]
    stage?: EnumStageFilter<"Three"> | $Enums.Stage
    status?: EnumStatusFilter<"Three"> | $Enums.Status
    marks?: StringNullableFilter<"Three"> | string | null
    comments?: StringNullableFilter<"Three"> | string | null
    createdAt?: DateTimeFilter<"Three"> | Date | string
    updatedAt?: DateTimeFilter<"Three"> | Date | string
    reviewId?: StringFilter<"Three"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }, "id">

  export type ThreeOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    _count?: ThreeCountOrderByAggregateInput
    _max?: ThreeMaxOrderByAggregateInput
    _min?: ThreeMinOrderByAggregateInput
  }

  export type ThreeScalarWhereWithAggregatesInput = {
    AND?: ThreeScalarWhereWithAggregatesInput | ThreeScalarWhereWithAggregatesInput[]
    OR?: ThreeScalarWhereWithAggregatesInput[]
    NOT?: ThreeScalarWhereWithAggregatesInput | ThreeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Three"> | string
    stage?: EnumStageWithAggregatesFilter<"Three"> | $Enums.Stage
    status?: EnumStatusWithAggregatesFilter<"Three"> | $Enums.Status
    marks?: StringNullableWithAggregatesFilter<"Three"> | string | null
    comments?: StringNullableWithAggregatesFilter<"Three"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Three"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Three"> | Date | string
    reviewId?: StringWithAggregatesFilter<"Three"> | string
  }

  export type ModelWhereInput = {
    AND?: ModelWhereInput | ModelWhereInput[]
    OR?: ModelWhereInput[]
    NOT?: ModelWhereInput | ModelWhereInput[]
    id?: StringFilter<"Model"> | string
    stage?: EnumStageFilter<"Model"> | $Enums.Stage
    status?: EnumStatusFilter<"Model"> | $Enums.Status
    marks?: StringNullableFilter<"Model"> | string | null
    comments?: StringNullableFilter<"Model"> | string | null
    createdAt?: DateTimeFilter<"Model"> | Date | string
    updatedAt?: DateTimeFilter<"Model"> | Date | string
    reviewId?: StringFilter<"Model"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }

  export type ModelOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    Review?: ReviewOrderByWithRelationInput
  }

  export type ModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ModelWhereInput | ModelWhereInput[]
    OR?: ModelWhereInput[]
    NOT?: ModelWhereInput | ModelWhereInput[]
    stage?: EnumStageFilter<"Model"> | $Enums.Stage
    status?: EnumStatusFilter<"Model"> | $Enums.Status
    marks?: StringNullableFilter<"Model"> | string | null
    comments?: StringNullableFilter<"Model"> | string | null
    createdAt?: DateTimeFilter<"Model"> | Date | string
    updatedAt?: DateTimeFilter<"Model"> | Date | string
    reviewId?: StringFilter<"Model"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }, "id">

  export type ModelOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    _count?: ModelCountOrderByAggregateInput
    _max?: ModelMaxOrderByAggregateInput
    _min?: ModelMinOrderByAggregateInput
  }

  export type ModelScalarWhereWithAggregatesInput = {
    AND?: ModelScalarWhereWithAggregatesInput | ModelScalarWhereWithAggregatesInput[]
    OR?: ModelScalarWhereWithAggregatesInput[]
    NOT?: ModelScalarWhereWithAggregatesInput | ModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Model"> | string
    stage?: EnumStageWithAggregatesFilter<"Model"> | $Enums.Stage
    status?: EnumStatusWithAggregatesFilter<"Model"> | $Enums.Status
    marks?: StringNullableWithAggregatesFilter<"Model"> | string | null
    comments?: StringNullableWithAggregatesFilter<"Model"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Model"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Model"> | Date | string
    reviewId?: StringWithAggregatesFilter<"Model"> | string
  }

  export type FinalWhereInput = {
    AND?: FinalWhereInput | FinalWhereInput[]
    OR?: FinalWhereInput[]
    NOT?: FinalWhereInput | FinalWhereInput[]
    id?: StringFilter<"Final"> | string
    stage?: EnumStageFilter<"Final"> | $Enums.Stage
    status?: EnumStatusFilter<"Final"> | $Enums.Status
    marks?: StringNullableFilter<"Final"> | string | null
    comments?: StringNullableFilter<"Final"> | string | null
    createdAt?: DateTimeFilter<"Final"> | Date | string
    updatedAt?: DateTimeFilter<"Final"> | Date | string
    reviewId?: StringFilter<"Final"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }

  export type FinalOrderByWithRelationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    Review?: ReviewOrderByWithRelationInput
  }

  export type FinalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FinalWhereInput | FinalWhereInput[]
    OR?: FinalWhereInput[]
    NOT?: FinalWhereInput | FinalWhereInput[]
    stage?: EnumStageFilter<"Final"> | $Enums.Stage
    status?: EnumStatusFilter<"Final"> | $Enums.Status
    marks?: StringNullableFilter<"Final"> | string | null
    comments?: StringNullableFilter<"Final"> | string | null
    createdAt?: DateTimeFilter<"Final"> | Date | string
    updatedAt?: DateTimeFilter<"Final"> | Date | string
    reviewId?: StringFilter<"Final"> | string
    Review?: XOR<ReviewRelationFilter, ReviewWhereInput>
  }, "id">

  export type FinalOrderByWithAggregationInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
    _count?: FinalCountOrderByAggregateInput
    _max?: FinalMaxOrderByAggregateInput
    _min?: FinalMinOrderByAggregateInput
  }

  export type FinalScalarWhereWithAggregatesInput = {
    AND?: FinalScalarWhereWithAggregatesInput | FinalScalarWhereWithAggregatesInput[]
    OR?: FinalScalarWhereWithAggregatesInput[]
    NOT?: FinalScalarWhereWithAggregatesInput | FinalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Final"> | string
    stage?: EnumStageWithAggregatesFilter<"Final"> | $Enums.Stage
    status?: EnumStatusWithAggregatesFilter<"Final"> | $Enums.Status
    marks?: StringNullableWithAggregatesFilter<"Final"> | string | null
    comments?: StringNullableWithAggregatesFilter<"Final"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Final"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Final"> | Date | string
    reviewId?: StringWithAggregatesFilter<"Final"> | string
  }

  export type AdminCreateInput = {
    id?: string
    fullName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    fullName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    id?: string
    fullName: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutProjectsInput
    students?: StudentCreateNestedManyWithoutProjectInput
    review?: ReviewCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staffId: string
    students?: StudentUncheckedCreateNestedManyWithoutProjectInput
    review?: ReviewUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutProjectsNestedInput
    students?: StudentUpdateManyWithoutProjectNestedInput
    review?: ReviewUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffId?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutProjectNestedInput
    review?: ReviewUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staffId: string
  }

  export type ProjectUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffId?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type ReviewUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type StaffCreateInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profileImg: Buffer
    specializations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profileImg: Buffer
    specializations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImg?: BytesFieldUpdateOperationsInput | Buffer
    specializations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImg?: BytesFieldUpdateOperationsInput | Buffer
    specializations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffCreateManyInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profileImg: Buffer
    specializations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImg?: BytesFieldUpdateOperationsInput | Buffer
    specializations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateManyInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImg?: BytesFieldUpdateOperationsInput | Buffer
    specializations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    id?: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
  }

  export type StudentUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateManyInput = {
    id?: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
  }

  export type StudentUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ZeroCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Review: ReviewCreateNestedOneWithoutReviewZeroInput
  }

  export type ZeroUncheckedCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type ZeroUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateOneRequiredWithoutReviewZeroNestedInput
  }

  export type ZeroUncheckedUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type ZeroCreateManyInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type ZeroUpdateManyMutationInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZeroUncheckedUpdateManyInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type OneCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Review: ReviewCreateNestedOneWithoutReviewOneInput
  }

  export type OneUncheckedCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type OneUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateOneRequiredWithoutReviewOneNestedInput
  }

  export type OneUncheckedUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type OneCreateManyInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type OneUpdateManyMutationInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OneUncheckedUpdateManyInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type TwoCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Review: ReviewCreateNestedOneWithoutReviewTwoInput
  }

  export type TwoUncheckedCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type TwoUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateOneRequiredWithoutReviewTwoNestedInput
  }

  export type TwoUncheckedUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type TwoCreateManyInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type TwoUpdateManyMutationInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoUncheckedUpdateManyInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type ThreeCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Review: ReviewCreateNestedOneWithoutReviewThreeInput
  }

  export type ThreeUncheckedCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type ThreeUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateOneRequiredWithoutReviewThreeNestedInput
  }

  export type ThreeUncheckedUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type ThreeCreateManyInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type ThreeUpdateManyMutationInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreeUncheckedUpdateManyInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type ModelCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Review: ReviewCreateNestedOneWithoutReviewModelInput
  }

  export type ModelUncheckedCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type ModelUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateOneRequiredWithoutReviewModelNestedInput
  }

  export type ModelUncheckedUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type ModelCreateManyInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type ModelUpdateManyMutationInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModelUncheckedUpdateManyInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type FinalCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Review: ReviewCreateNestedOneWithoutReviewFinalInput
  }

  export type FinalUncheckedCreateInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type FinalUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Review?: ReviewUpdateOneRequiredWithoutReviewFinalNestedInput
  }

  export type FinalUncheckedUpdateInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type FinalCreateManyInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewId: string
  }

  export type FinalUpdateManyMutationInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinalUncheckedUpdateManyInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StaffRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staffId?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staffId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staffId?: SortOrder
  }

  export type ZeroListRelationFilter = {
    every?: ZeroWhereInput
    some?: ZeroWhereInput
    none?: ZeroWhereInput
  }

  export type OneListRelationFilter = {
    every?: OneWhereInput
    some?: OneWhereInput
    none?: OneWhereInput
  }

  export type TwoListRelationFilter = {
    every?: TwoWhereInput
    some?: TwoWhereInput
    none?: TwoWhereInput
  }

  export type ThreeListRelationFilter = {
    every?: ThreeWhereInput
    some?: ThreeWhereInput
    none?: ThreeWhereInput
  }

  export type ModelListRelationFilter = {
    every?: ModelWhereInput
    some?: ModelWhereInput
    none?: ModelWhereInput
  }

  export type FinalListRelationFilter = {
    every?: FinalWhereInput
    some?: FinalWhereInput
    none?: FinalWhereInput
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ZeroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThreeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FinalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileImg?: SortOrder
    specializations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileImg?: SortOrder
    specializations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileImg?: SortOrder
    specializations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    regNo?: SortOrder
    email?: SortOrder
    batch?: SortOrder
    password?: SortOrder
    phoneNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    regNo?: SortOrder
    email?: SortOrder
    batch?: SortOrder
    password?: SortOrder
    phoneNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    regNo?: SortOrder
    email?: SortOrder
    batch?: SortOrder
    password?: SortOrder
    phoneNo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type EnumStageFilter<$PrismaModel = never> = {
    equals?: $Enums.Stage | EnumStageFieldRefInput<$PrismaModel>
    in?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStageFilter<$PrismaModel> | $Enums.Stage
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type ReviewRelationFilter = {
    is?: ReviewWhereInput
    isNot?: ReviewWhereInput
  }

  export type ZeroCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ZeroMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ZeroMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type EnumStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Stage | EnumStageFieldRefInput<$PrismaModel>
    in?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStageWithAggregatesFilter<$PrismaModel> | $Enums.Stage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageFilter<$PrismaModel>
    _max?: NestedEnumStageFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type OneCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type OneMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type OneMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type TwoCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type TwoMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type TwoMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ThreeCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ThreeMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ThreeMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ModelCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ModelMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type ModelMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type FinalCountOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type FinalMaxOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type FinalMinOrderByAggregateInput = {
    id?: SortOrder
    stage?: SortOrder
    status?: SortOrder
    marks?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reviewId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StaffCreateNestedOneWithoutProjectsInput = {
    create?: XOR<StaffCreateWithoutProjectsInput, StaffUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutProjectsInput
    connect?: StaffWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutProjectInput = {
    create?: XOR<StudentCreateWithoutProjectInput, StudentUncheckedCreateWithoutProjectInput> | StudentCreateWithoutProjectInput[] | StudentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProjectInput | StudentCreateOrConnectWithoutProjectInput[]
    createMany?: StudentCreateManyProjectInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<StudentCreateWithoutProjectInput, StudentUncheckedCreateWithoutProjectInput> | StudentCreateWithoutProjectInput[] | StudentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProjectInput | StudentCreateOrConnectWithoutProjectInput[]
    createMany?: StudentCreateManyProjectInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StaffUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<StaffCreateWithoutProjectsInput, StaffUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: StaffCreateOrConnectWithoutProjectsInput
    upsert?: StaffUpsertWithoutProjectsInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutProjectsInput, StaffUpdateWithoutProjectsInput>, StaffUncheckedUpdateWithoutProjectsInput>
  }

  export type StudentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<StudentCreateWithoutProjectInput, StudentUncheckedCreateWithoutProjectInput> | StudentCreateWithoutProjectInput[] | StudentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProjectInput | StudentCreateOrConnectWithoutProjectInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutProjectInput | StudentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: StudentCreateManyProjectInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutProjectInput | StudentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutProjectInput | StudentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProjectInput | ReviewUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProjectInput | ReviewUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProjectInput | ReviewUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<StudentCreateWithoutProjectInput, StudentUncheckedCreateWithoutProjectInput> | StudentCreateWithoutProjectInput[] | StudentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutProjectInput | StudentCreateOrConnectWithoutProjectInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutProjectInput | StudentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: StudentCreateManyProjectInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutProjectInput | StudentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutProjectInput | StudentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProjectInput | ReviewUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProjectInput | ReviewUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProjectInput | ReviewUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ZeroCreateNestedManyWithoutReviewInput = {
    create?: XOR<ZeroCreateWithoutReviewInput, ZeroUncheckedCreateWithoutReviewInput> | ZeroCreateWithoutReviewInput[] | ZeroUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ZeroCreateOrConnectWithoutReviewInput | ZeroCreateOrConnectWithoutReviewInput[]
    createMany?: ZeroCreateManyReviewInputEnvelope
    connect?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
  }

  export type OneCreateNestedManyWithoutReviewInput = {
    create?: XOR<OneCreateWithoutReviewInput, OneUncheckedCreateWithoutReviewInput> | OneCreateWithoutReviewInput[] | OneUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: OneCreateOrConnectWithoutReviewInput | OneCreateOrConnectWithoutReviewInput[]
    createMany?: OneCreateManyReviewInputEnvelope
    connect?: OneWhereUniqueInput | OneWhereUniqueInput[]
  }

  export type TwoCreateNestedManyWithoutReviewInput = {
    create?: XOR<TwoCreateWithoutReviewInput, TwoUncheckedCreateWithoutReviewInput> | TwoCreateWithoutReviewInput[] | TwoUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: TwoCreateOrConnectWithoutReviewInput | TwoCreateOrConnectWithoutReviewInput[]
    createMany?: TwoCreateManyReviewInputEnvelope
    connect?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
  }

  export type ThreeCreateNestedManyWithoutReviewInput = {
    create?: XOR<ThreeCreateWithoutReviewInput, ThreeUncheckedCreateWithoutReviewInput> | ThreeCreateWithoutReviewInput[] | ThreeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ThreeCreateOrConnectWithoutReviewInput | ThreeCreateOrConnectWithoutReviewInput[]
    createMany?: ThreeCreateManyReviewInputEnvelope
    connect?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
  }

  export type ModelCreateNestedManyWithoutReviewInput = {
    create?: XOR<ModelCreateWithoutReviewInput, ModelUncheckedCreateWithoutReviewInput> | ModelCreateWithoutReviewInput[] | ModelUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ModelCreateOrConnectWithoutReviewInput | ModelCreateOrConnectWithoutReviewInput[]
    createMany?: ModelCreateManyReviewInputEnvelope
    connect?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
  }

  export type FinalCreateNestedManyWithoutReviewInput = {
    create?: XOR<FinalCreateWithoutReviewInput, FinalUncheckedCreateWithoutReviewInput> | FinalCreateWithoutReviewInput[] | FinalUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: FinalCreateOrConnectWithoutReviewInput | FinalCreateOrConnectWithoutReviewInput[]
    createMany?: FinalCreateManyReviewInputEnvelope
    connect?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
  }

  export type ProjectCreateNestedOneWithoutReviewInput = {
    create?: XOR<ProjectCreateWithoutReviewInput, ProjectUncheckedCreateWithoutReviewInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReviewInput
    connect?: ProjectWhereUniqueInput
  }

  export type ZeroUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ZeroCreateWithoutReviewInput, ZeroUncheckedCreateWithoutReviewInput> | ZeroCreateWithoutReviewInput[] | ZeroUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ZeroCreateOrConnectWithoutReviewInput | ZeroCreateOrConnectWithoutReviewInput[]
    createMany?: ZeroCreateManyReviewInputEnvelope
    connect?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
  }

  export type OneUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<OneCreateWithoutReviewInput, OneUncheckedCreateWithoutReviewInput> | OneCreateWithoutReviewInput[] | OneUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: OneCreateOrConnectWithoutReviewInput | OneCreateOrConnectWithoutReviewInput[]
    createMany?: OneCreateManyReviewInputEnvelope
    connect?: OneWhereUniqueInput | OneWhereUniqueInput[]
  }

  export type TwoUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<TwoCreateWithoutReviewInput, TwoUncheckedCreateWithoutReviewInput> | TwoCreateWithoutReviewInput[] | TwoUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: TwoCreateOrConnectWithoutReviewInput | TwoCreateOrConnectWithoutReviewInput[]
    createMany?: TwoCreateManyReviewInputEnvelope
    connect?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
  }

  export type ThreeUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ThreeCreateWithoutReviewInput, ThreeUncheckedCreateWithoutReviewInput> | ThreeCreateWithoutReviewInput[] | ThreeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ThreeCreateOrConnectWithoutReviewInput | ThreeCreateOrConnectWithoutReviewInput[]
    createMany?: ThreeCreateManyReviewInputEnvelope
    connect?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
  }

  export type ModelUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ModelCreateWithoutReviewInput, ModelUncheckedCreateWithoutReviewInput> | ModelCreateWithoutReviewInput[] | ModelUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ModelCreateOrConnectWithoutReviewInput | ModelCreateOrConnectWithoutReviewInput[]
    createMany?: ModelCreateManyReviewInputEnvelope
    connect?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
  }

  export type FinalUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<FinalCreateWithoutReviewInput, FinalUncheckedCreateWithoutReviewInput> | FinalCreateWithoutReviewInput[] | FinalUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: FinalCreateOrConnectWithoutReviewInput | FinalCreateOrConnectWithoutReviewInput[]
    createMany?: FinalCreateManyReviewInputEnvelope
    connect?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
  }

  export type ZeroUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ZeroCreateWithoutReviewInput, ZeroUncheckedCreateWithoutReviewInput> | ZeroCreateWithoutReviewInput[] | ZeroUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ZeroCreateOrConnectWithoutReviewInput | ZeroCreateOrConnectWithoutReviewInput[]
    upsert?: ZeroUpsertWithWhereUniqueWithoutReviewInput | ZeroUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ZeroCreateManyReviewInputEnvelope
    set?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    disconnect?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    delete?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    connect?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    update?: ZeroUpdateWithWhereUniqueWithoutReviewInput | ZeroUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ZeroUpdateManyWithWhereWithoutReviewInput | ZeroUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ZeroScalarWhereInput | ZeroScalarWhereInput[]
  }

  export type OneUpdateManyWithoutReviewNestedInput = {
    create?: XOR<OneCreateWithoutReviewInput, OneUncheckedCreateWithoutReviewInput> | OneCreateWithoutReviewInput[] | OneUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: OneCreateOrConnectWithoutReviewInput | OneCreateOrConnectWithoutReviewInput[]
    upsert?: OneUpsertWithWhereUniqueWithoutReviewInput | OneUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: OneCreateManyReviewInputEnvelope
    set?: OneWhereUniqueInput | OneWhereUniqueInput[]
    disconnect?: OneWhereUniqueInput | OneWhereUniqueInput[]
    delete?: OneWhereUniqueInput | OneWhereUniqueInput[]
    connect?: OneWhereUniqueInput | OneWhereUniqueInput[]
    update?: OneUpdateWithWhereUniqueWithoutReviewInput | OneUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: OneUpdateManyWithWhereWithoutReviewInput | OneUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: OneScalarWhereInput | OneScalarWhereInput[]
  }

  export type TwoUpdateManyWithoutReviewNestedInput = {
    create?: XOR<TwoCreateWithoutReviewInput, TwoUncheckedCreateWithoutReviewInput> | TwoCreateWithoutReviewInput[] | TwoUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: TwoCreateOrConnectWithoutReviewInput | TwoCreateOrConnectWithoutReviewInput[]
    upsert?: TwoUpsertWithWhereUniqueWithoutReviewInput | TwoUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: TwoCreateManyReviewInputEnvelope
    set?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    disconnect?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    delete?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    connect?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    update?: TwoUpdateWithWhereUniqueWithoutReviewInput | TwoUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: TwoUpdateManyWithWhereWithoutReviewInput | TwoUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: TwoScalarWhereInput | TwoScalarWhereInput[]
  }

  export type ThreeUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ThreeCreateWithoutReviewInput, ThreeUncheckedCreateWithoutReviewInput> | ThreeCreateWithoutReviewInput[] | ThreeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ThreeCreateOrConnectWithoutReviewInput | ThreeCreateOrConnectWithoutReviewInput[]
    upsert?: ThreeUpsertWithWhereUniqueWithoutReviewInput | ThreeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ThreeCreateManyReviewInputEnvelope
    set?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    disconnect?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    delete?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    connect?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    update?: ThreeUpdateWithWhereUniqueWithoutReviewInput | ThreeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ThreeUpdateManyWithWhereWithoutReviewInput | ThreeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ThreeScalarWhereInput | ThreeScalarWhereInput[]
  }

  export type ModelUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ModelCreateWithoutReviewInput, ModelUncheckedCreateWithoutReviewInput> | ModelCreateWithoutReviewInput[] | ModelUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ModelCreateOrConnectWithoutReviewInput | ModelCreateOrConnectWithoutReviewInput[]
    upsert?: ModelUpsertWithWhereUniqueWithoutReviewInput | ModelUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ModelCreateManyReviewInputEnvelope
    set?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    disconnect?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    delete?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    connect?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    update?: ModelUpdateWithWhereUniqueWithoutReviewInput | ModelUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ModelUpdateManyWithWhereWithoutReviewInput | ModelUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ModelScalarWhereInput | ModelScalarWhereInput[]
  }

  export type FinalUpdateManyWithoutReviewNestedInput = {
    create?: XOR<FinalCreateWithoutReviewInput, FinalUncheckedCreateWithoutReviewInput> | FinalCreateWithoutReviewInput[] | FinalUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: FinalCreateOrConnectWithoutReviewInput | FinalCreateOrConnectWithoutReviewInput[]
    upsert?: FinalUpsertWithWhereUniqueWithoutReviewInput | FinalUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: FinalCreateManyReviewInputEnvelope
    set?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    disconnect?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    delete?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    connect?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    update?: FinalUpdateWithWhereUniqueWithoutReviewInput | FinalUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: FinalUpdateManyWithWhereWithoutReviewInput | FinalUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: FinalScalarWhereInput | FinalScalarWhereInput[]
  }

  export type ProjectUpdateOneWithoutReviewNestedInput = {
    create?: XOR<ProjectCreateWithoutReviewInput, ProjectUncheckedCreateWithoutReviewInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReviewInput
    upsert?: ProjectUpsertWithoutReviewInput
    disconnect?: boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutReviewInput, ProjectUpdateWithoutReviewInput>, ProjectUncheckedUpdateWithoutReviewInput>
  }

  export type ZeroUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ZeroCreateWithoutReviewInput, ZeroUncheckedCreateWithoutReviewInput> | ZeroCreateWithoutReviewInput[] | ZeroUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ZeroCreateOrConnectWithoutReviewInput | ZeroCreateOrConnectWithoutReviewInput[]
    upsert?: ZeroUpsertWithWhereUniqueWithoutReviewInput | ZeroUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ZeroCreateManyReviewInputEnvelope
    set?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    disconnect?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    delete?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    connect?: ZeroWhereUniqueInput | ZeroWhereUniqueInput[]
    update?: ZeroUpdateWithWhereUniqueWithoutReviewInput | ZeroUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ZeroUpdateManyWithWhereWithoutReviewInput | ZeroUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ZeroScalarWhereInput | ZeroScalarWhereInput[]
  }

  export type OneUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<OneCreateWithoutReviewInput, OneUncheckedCreateWithoutReviewInput> | OneCreateWithoutReviewInput[] | OneUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: OneCreateOrConnectWithoutReviewInput | OneCreateOrConnectWithoutReviewInput[]
    upsert?: OneUpsertWithWhereUniqueWithoutReviewInput | OneUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: OneCreateManyReviewInputEnvelope
    set?: OneWhereUniqueInput | OneWhereUniqueInput[]
    disconnect?: OneWhereUniqueInput | OneWhereUniqueInput[]
    delete?: OneWhereUniqueInput | OneWhereUniqueInput[]
    connect?: OneWhereUniqueInput | OneWhereUniqueInput[]
    update?: OneUpdateWithWhereUniqueWithoutReviewInput | OneUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: OneUpdateManyWithWhereWithoutReviewInput | OneUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: OneScalarWhereInput | OneScalarWhereInput[]
  }

  export type TwoUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<TwoCreateWithoutReviewInput, TwoUncheckedCreateWithoutReviewInput> | TwoCreateWithoutReviewInput[] | TwoUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: TwoCreateOrConnectWithoutReviewInput | TwoCreateOrConnectWithoutReviewInput[]
    upsert?: TwoUpsertWithWhereUniqueWithoutReviewInput | TwoUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: TwoCreateManyReviewInputEnvelope
    set?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    disconnect?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    delete?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    connect?: TwoWhereUniqueInput | TwoWhereUniqueInput[]
    update?: TwoUpdateWithWhereUniqueWithoutReviewInput | TwoUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: TwoUpdateManyWithWhereWithoutReviewInput | TwoUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: TwoScalarWhereInput | TwoScalarWhereInput[]
  }

  export type ThreeUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ThreeCreateWithoutReviewInput, ThreeUncheckedCreateWithoutReviewInput> | ThreeCreateWithoutReviewInput[] | ThreeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ThreeCreateOrConnectWithoutReviewInput | ThreeCreateOrConnectWithoutReviewInput[]
    upsert?: ThreeUpsertWithWhereUniqueWithoutReviewInput | ThreeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ThreeCreateManyReviewInputEnvelope
    set?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    disconnect?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    delete?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    connect?: ThreeWhereUniqueInput | ThreeWhereUniqueInput[]
    update?: ThreeUpdateWithWhereUniqueWithoutReviewInput | ThreeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ThreeUpdateManyWithWhereWithoutReviewInput | ThreeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ThreeScalarWhereInput | ThreeScalarWhereInput[]
  }

  export type ModelUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ModelCreateWithoutReviewInput, ModelUncheckedCreateWithoutReviewInput> | ModelCreateWithoutReviewInput[] | ModelUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ModelCreateOrConnectWithoutReviewInput | ModelCreateOrConnectWithoutReviewInput[]
    upsert?: ModelUpsertWithWhereUniqueWithoutReviewInput | ModelUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ModelCreateManyReviewInputEnvelope
    set?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    disconnect?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    delete?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    connect?: ModelWhereUniqueInput | ModelWhereUniqueInput[]
    update?: ModelUpdateWithWhereUniqueWithoutReviewInput | ModelUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ModelUpdateManyWithWhereWithoutReviewInput | ModelUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ModelScalarWhereInput | ModelScalarWhereInput[]
  }

  export type FinalUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<FinalCreateWithoutReviewInput, FinalUncheckedCreateWithoutReviewInput> | FinalCreateWithoutReviewInput[] | FinalUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: FinalCreateOrConnectWithoutReviewInput | FinalCreateOrConnectWithoutReviewInput[]
    upsert?: FinalUpsertWithWhereUniqueWithoutReviewInput | FinalUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: FinalCreateManyReviewInputEnvelope
    set?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    disconnect?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    delete?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    connect?: FinalWhereUniqueInput | FinalWhereUniqueInput[]
    update?: FinalUpdateWithWhereUniqueWithoutReviewInput | FinalUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: FinalUpdateManyWithWhereWithoutReviewInput | FinalUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: FinalScalarWhereInput | FinalScalarWhereInput[]
  }

  export type ProjectCreateNestedManyWithoutStaffInput = {
    create?: XOR<ProjectCreateWithoutStaffInput, ProjectUncheckedCreateWithoutStaffInput> | ProjectCreateWithoutStaffInput[] | ProjectUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStaffInput | ProjectCreateOrConnectWithoutStaffInput[]
    createMany?: ProjectCreateManyStaffInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<ProjectCreateWithoutStaffInput, ProjectUncheckedCreateWithoutStaffInput> | ProjectCreateWithoutStaffInput[] | ProjectUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStaffInput | ProjectCreateOrConnectWithoutStaffInput[]
    createMany?: ProjectCreateManyStaffInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type ProjectUpdateManyWithoutStaffNestedInput = {
    create?: XOR<ProjectCreateWithoutStaffInput, ProjectUncheckedCreateWithoutStaffInput> | ProjectCreateWithoutStaffInput[] | ProjectUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStaffInput | ProjectCreateOrConnectWithoutStaffInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutStaffInput | ProjectUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: ProjectCreateManyStaffInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutStaffInput | ProjectUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutStaffInput | ProjectUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<ProjectCreateWithoutStaffInput, ProjectUncheckedCreateWithoutStaffInput> | ProjectCreateWithoutStaffInput[] | ProjectUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutStaffInput | ProjectCreateOrConnectWithoutStaffInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutStaffInput | ProjectUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: ProjectCreateManyStaffInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutStaffInput | ProjectUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutStaffInput | ProjectUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ProjectCreateWithoutStudentsInput, ProjectUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutStudentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneWithoutStudentsNestedInput = {
    create?: XOR<ProjectCreateWithoutStudentsInput, ProjectUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutStudentsInput
    upsert?: ProjectUpsertWithoutStudentsInput
    disconnect?: boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutStudentsInput, ProjectUpdateWithoutStudentsInput>, ProjectUncheckedUpdateWithoutStudentsInput>
  }

  export type ReviewCreateNestedOneWithoutReviewZeroInput = {
    create?: XOR<ReviewCreateWithoutReviewZeroInput, ReviewUncheckedCreateWithoutReviewZeroInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewZeroInput
    connect?: ReviewWhereUniqueInput
  }

  export type EnumStageFieldUpdateOperationsInput = {
    set?: $Enums.Stage
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type ReviewUpdateOneRequiredWithoutReviewZeroNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewZeroInput, ReviewUncheckedCreateWithoutReviewZeroInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewZeroInput
    upsert?: ReviewUpsertWithoutReviewZeroInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewZeroInput, ReviewUpdateWithoutReviewZeroInput>, ReviewUncheckedUpdateWithoutReviewZeroInput>
  }

  export type ReviewCreateNestedOneWithoutReviewOneInput = {
    create?: XOR<ReviewCreateWithoutReviewOneInput, ReviewUncheckedCreateWithoutReviewOneInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewOneInput
    connect?: ReviewWhereUniqueInput
  }

  export type ReviewUpdateOneRequiredWithoutReviewOneNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewOneInput, ReviewUncheckedCreateWithoutReviewOneInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewOneInput
    upsert?: ReviewUpsertWithoutReviewOneInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewOneInput, ReviewUpdateWithoutReviewOneInput>, ReviewUncheckedUpdateWithoutReviewOneInput>
  }

  export type ReviewCreateNestedOneWithoutReviewTwoInput = {
    create?: XOR<ReviewCreateWithoutReviewTwoInput, ReviewUncheckedCreateWithoutReviewTwoInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewTwoInput
    connect?: ReviewWhereUniqueInput
  }

  export type ReviewUpdateOneRequiredWithoutReviewTwoNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewTwoInput, ReviewUncheckedCreateWithoutReviewTwoInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewTwoInput
    upsert?: ReviewUpsertWithoutReviewTwoInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewTwoInput, ReviewUpdateWithoutReviewTwoInput>, ReviewUncheckedUpdateWithoutReviewTwoInput>
  }

  export type ReviewCreateNestedOneWithoutReviewThreeInput = {
    create?: XOR<ReviewCreateWithoutReviewThreeInput, ReviewUncheckedCreateWithoutReviewThreeInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewThreeInput
    connect?: ReviewWhereUniqueInput
  }

  export type ReviewUpdateOneRequiredWithoutReviewThreeNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewThreeInput, ReviewUncheckedCreateWithoutReviewThreeInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewThreeInput
    upsert?: ReviewUpsertWithoutReviewThreeInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewThreeInput, ReviewUpdateWithoutReviewThreeInput>, ReviewUncheckedUpdateWithoutReviewThreeInput>
  }

  export type ReviewCreateNestedOneWithoutReviewModelInput = {
    create?: XOR<ReviewCreateWithoutReviewModelInput, ReviewUncheckedCreateWithoutReviewModelInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewModelInput
    connect?: ReviewWhereUniqueInput
  }

  export type ReviewUpdateOneRequiredWithoutReviewModelNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewModelInput, ReviewUncheckedCreateWithoutReviewModelInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewModelInput
    upsert?: ReviewUpsertWithoutReviewModelInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewModelInput, ReviewUpdateWithoutReviewModelInput>, ReviewUncheckedUpdateWithoutReviewModelInput>
  }

  export type ReviewCreateNestedOneWithoutReviewFinalInput = {
    create?: XOR<ReviewCreateWithoutReviewFinalInput, ReviewUncheckedCreateWithoutReviewFinalInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewFinalInput
    connect?: ReviewWhereUniqueInput
  }

  export type ReviewUpdateOneRequiredWithoutReviewFinalNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewFinalInput, ReviewUncheckedCreateWithoutReviewFinalInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewFinalInput
    upsert?: ReviewUpsertWithoutReviewFinalInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewFinalInput, ReviewUpdateWithoutReviewFinalInput>, ReviewUncheckedUpdateWithoutReviewFinalInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumStageFilter<$PrismaModel = never> = {
    equals?: $Enums.Stage | EnumStageFieldRefInput<$PrismaModel>
    in?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStageFilter<$PrismaModel> | $Enums.Stage
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Stage | EnumStageFieldRefInput<$PrismaModel>
    in?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Stage[] | ListEnumStageFieldRefInput<$PrismaModel>
    not?: NestedEnumStageWithAggregatesFilter<$PrismaModel> | $Enums.Stage
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageFilter<$PrismaModel>
    _max?: NestedEnumStageFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type StaffCreateWithoutProjectsInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profileImg: Buffer
    specializations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUncheckedCreateWithoutProjectsInput = {
    id?: string
    fullName: string
    email: string
    password: string
    profileImg: Buffer
    specializations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateOrConnectWithoutProjectsInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutProjectsInput, StaffUncheckedCreateWithoutProjectsInput>
  }

  export type StudentCreateWithoutProjectInput = {
    id?: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUncheckedCreateWithoutProjectInput = {
    id?: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentCreateOrConnectWithoutProjectInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutProjectInput, StudentUncheckedCreateWithoutProjectInput>
  }

  export type StudentCreateManyProjectInputEnvelope = {
    data: StudentCreateManyProjectInput | StudentCreateManyProjectInput[]
  }

  export type ReviewCreateWithoutProjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutProjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutProjectInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput>
  }

  export type ReviewCreateManyProjectInputEnvelope = {
    data: ReviewCreateManyProjectInput | ReviewCreateManyProjectInput[]
  }

  export type StaffUpsertWithoutProjectsInput = {
    update: XOR<StaffUpdateWithoutProjectsInput, StaffUncheckedUpdateWithoutProjectsInput>
    create: XOR<StaffCreateWithoutProjectsInput, StaffUncheckedCreateWithoutProjectsInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutProjectsInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutProjectsInput, StaffUncheckedUpdateWithoutProjectsInput>
  }

  export type StaffUpdateWithoutProjectsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImg?: BytesFieldUpdateOperationsInput | Buffer
    specializations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateWithoutProjectsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImg?: BytesFieldUpdateOperationsInput | Buffer
    specializations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpsertWithWhereUniqueWithoutProjectInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutProjectInput, StudentUncheckedUpdateWithoutProjectInput>
    create: XOR<StudentCreateWithoutProjectInput, StudentUncheckedCreateWithoutProjectInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutProjectInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutProjectInput, StudentUncheckedUpdateWithoutProjectInput>
  }

  export type StudentUpdateManyWithWhereWithoutProjectInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutProjectInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    fullName?: StringFilter<"Student"> | string
    regNo?: StringFilter<"Student"> | string
    email?: StringFilter<"Student"> | string
    batch?: StringFilter<"Student"> | string
    password?: StringFilter<"Student"> | string
    phoneNo?: StringFilter<"Student"> | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    projectId?: StringNullableFilter<"Student"> | string | null
  }

  export type ReviewUpsertWithWhereUniqueWithoutProjectInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutProjectInput, ReviewUncheckedUpdateWithoutProjectInput>
    create: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutProjectInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutProjectInput, ReviewUncheckedUpdateWithoutProjectInput>
  }

  export type ReviewUpdateManyWithWhereWithoutProjectInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutProjectInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeFilter<"Review"> | Date | string
    projectId?: StringFilter<"Review"> | string
  }

  export type ZeroCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZeroUncheckedCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZeroCreateOrConnectWithoutReviewInput = {
    where: ZeroWhereUniqueInput
    create: XOR<ZeroCreateWithoutReviewInput, ZeroUncheckedCreateWithoutReviewInput>
  }

  export type ZeroCreateManyReviewInputEnvelope = {
    data: ZeroCreateManyReviewInput | ZeroCreateManyReviewInput[]
  }

  export type OneCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OneUncheckedCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OneCreateOrConnectWithoutReviewInput = {
    where: OneWhereUniqueInput
    create: XOR<OneCreateWithoutReviewInput, OneUncheckedCreateWithoutReviewInput>
  }

  export type OneCreateManyReviewInputEnvelope = {
    data: OneCreateManyReviewInput | OneCreateManyReviewInput[]
  }

  export type TwoCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwoUncheckedCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwoCreateOrConnectWithoutReviewInput = {
    where: TwoWhereUniqueInput
    create: XOR<TwoCreateWithoutReviewInput, TwoUncheckedCreateWithoutReviewInput>
  }

  export type TwoCreateManyReviewInputEnvelope = {
    data: TwoCreateManyReviewInput | TwoCreateManyReviewInput[]
  }

  export type ThreeCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreeUncheckedCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreeCreateOrConnectWithoutReviewInput = {
    where: ThreeWhereUniqueInput
    create: XOR<ThreeCreateWithoutReviewInput, ThreeUncheckedCreateWithoutReviewInput>
  }

  export type ThreeCreateManyReviewInputEnvelope = {
    data: ThreeCreateManyReviewInput | ThreeCreateManyReviewInput[]
  }

  export type ModelCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModelUncheckedCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModelCreateOrConnectWithoutReviewInput = {
    where: ModelWhereUniqueInput
    create: XOR<ModelCreateWithoutReviewInput, ModelUncheckedCreateWithoutReviewInput>
  }

  export type ModelCreateManyReviewInputEnvelope = {
    data: ModelCreateManyReviewInput | ModelCreateManyReviewInput[]
  }

  export type FinalCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinalUncheckedCreateWithoutReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinalCreateOrConnectWithoutReviewInput = {
    where: FinalWhereUniqueInput
    create: XOR<FinalCreateWithoutReviewInput, FinalUncheckedCreateWithoutReviewInput>
  }

  export type FinalCreateManyReviewInputEnvelope = {
    data: FinalCreateManyReviewInput | FinalCreateManyReviewInput[]
  }

  export type ProjectCreateWithoutReviewInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutProjectsInput
    students?: StudentCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutReviewInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staffId: string
    students?: StudentUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutReviewInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutReviewInput, ProjectUncheckedCreateWithoutReviewInput>
  }

  export type ZeroUpsertWithWhereUniqueWithoutReviewInput = {
    where: ZeroWhereUniqueInput
    update: XOR<ZeroUpdateWithoutReviewInput, ZeroUncheckedUpdateWithoutReviewInput>
    create: XOR<ZeroCreateWithoutReviewInput, ZeroUncheckedCreateWithoutReviewInput>
  }

  export type ZeroUpdateWithWhereUniqueWithoutReviewInput = {
    where: ZeroWhereUniqueInput
    data: XOR<ZeroUpdateWithoutReviewInput, ZeroUncheckedUpdateWithoutReviewInput>
  }

  export type ZeroUpdateManyWithWhereWithoutReviewInput = {
    where: ZeroScalarWhereInput
    data: XOR<ZeroUpdateManyMutationInput, ZeroUncheckedUpdateManyWithoutReviewInput>
  }

  export type ZeroScalarWhereInput = {
    AND?: ZeroScalarWhereInput | ZeroScalarWhereInput[]
    OR?: ZeroScalarWhereInput[]
    NOT?: ZeroScalarWhereInput | ZeroScalarWhereInput[]
    id?: StringFilter<"Zero"> | string
    stage?: EnumStageFilter<"Zero"> | $Enums.Stage
    status?: EnumStatusFilter<"Zero"> | $Enums.Status
    marks?: StringNullableFilter<"Zero"> | string | null
    comments?: StringNullableFilter<"Zero"> | string | null
    createdAt?: DateTimeFilter<"Zero"> | Date | string
    updatedAt?: DateTimeFilter<"Zero"> | Date | string
    reviewId?: StringFilter<"Zero"> | string
  }

  export type OneUpsertWithWhereUniqueWithoutReviewInput = {
    where: OneWhereUniqueInput
    update: XOR<OneUpdateWithoutReviewInput, OneUncheckedUpdateWithoutReviewInput>
    create: XOR<OneCreateWithoutReviewInput, OneUncheckedCreateWithoutReviewInput>
  }

  export type OneUpdateWithWhereUniqueWithoutReviewInput = {
    where: OneWhereUniqueInput
    data: XOR<OneUpdateWithoutReviewInput, OneUncheckedUpdateWithoutReviewInput>
  }

  export type OneUpdateManyWithWhereWithoutReviewInput = {
    where: OneScalarWhereInput
    data: XOR<OneUpdateManyMutationInput, OneUncheckedUpdateManyWithoutReviewInput>
  }

  export type OneScalarWhereInput = {
    AND?: OneScalarWhereInput | OneScalarWhereInput[]
    OR?: OneScalarWhereInput[]
    NOT?: OneScalarWhereInput | OneScalarWhereInput[]
    id?: StringFilter<"One"> | string
    stage?: EnumStageFilter<"One"> | $Enums.Stage
    status?: EnumStatusFilter<"One"> | $Enums.Status
    marks?: StringNullableFilter<"One"> | string | null
    comments?: StringNullableFilter<"One"> | string | null
    createdAt?: DateTimeFilter<"One"> | Date | string
    updatedAt?: DateTimeFilter<"One"> | Date | string
    reviewId?: StringFilter<"One"> | string
  }

  export type TwoUpsertWithWhereUniqueWithoutReviewInput = {
    where: TwoWhereUniqueInput
    update: XOR<TwoUpdateWithoutReviewInput, TwoUncheckedUpdateWithoutReviewInput>
    create: XOR<TwoCreateWithoutReviewInput, TwoUncheckedCreateWithoutReviewInput>
  }

  export type TwoUpdateWithWhereUniqueWithoutReviewInput = {
    where: TwoWhereUniqueInput
    data: XOR<TwoUpdateWithoutReviewInput, TwoUncheckedUpdateWithoutReviewInput>
  }

  export type TwoUpdateManyWithWhereWithoutReviewInput = {
    where: TwoScalarWhereInput
    data: XOR<TwoUpdateManyMutationInput, TwoUncheckedUpdateManyWithoutReviewInput>
  }

  export type TwoScalarWhereInput = {
    AND?: TwoScalarWhereInput | TwoScalarWhereInput[]
    OR?: TwoScalarWhereInput[]
    NOT?: TwoScalarWhereInput | TwoScalarWhereInput[]
    id?: StringFilter<"Two"> | string
    stage?: EnumStageFilter<"Two"> | $Enums.Stage
    status?: EnumStatusFilter<"Two"> | $Enums.Status
    marks?: StringNullableFilter<"Two"> | string | null
    comments?: StringNullableFilter<"Two"> | string | null
    createdAt?: DateTimeFilter<"Two"> | Date | string
    updatedAt?: DateTimeFilter<"Two"> | Date | string
    reviewId?: StringFilter<"Two"> | string
  }

  export type ThreeUpsertWithWhereUniqueWithoutReviewInput = {
    where: ThreeWhereUniqueInput
    update: XOR<ThreeUpdateWithoutReviewInput, ThreeUncheckedUpdateWithoutReviewInput>
    create: XOR<ThreeCreateWithoutReviewInput, ThreeUncheckedCreateWithoutReviewInput>
  }

  export type ThreeUpdateWithWhereUniqueWithoutReviewInput = {
    where: ThreeWhereUniqueInput
    data: XOR<ThreeUpdateWithoutReviewInput, ThreeUncheckedUpdateWithoutReviewInput>
  }

  export type ThreeUpdateManyWithWhereWithoutReviewInput = {
    where: ThreeScalarWhereInput
    data: XOR<ThreeUpdateManyMutationInput, ThreeUncheckedUpdateManyWithoutReviewInput>
  }

  export type ThreeScalarWhereInput = {
    AND?: ThreeScalarWhereInput | ThreeScalarWhereInput[]
    OR?: ThreeScalarWhereInput[]
    NOT?: ThreeScalarWhereInput | ThreeScalarWhereInput[]
    id?: StringFilter<"Three"> | string
    stage?: EnumStageFilter<"Three"> | $Enums.Stage
    status?: EnumStatusFilter<"Three"> | $Enums.Status
    marks?: StringNullableFilter<"Three"> | string | null
    comments?: StringNullableFilter<"Three"> | string | null
    createdAt?: DateTimeFilter<"Three"> | Date | string
    updatedAt?: DateTimeFilter<"Three"> | Date | string
    reviewId?: StringFilter<"Three"> | string
  }

  export type ModelUpsertWithWhereUniqueWithoutReviewInput = {
    where: ModelWhereUniqueInput
    update: XOR<ModelUpdateWithoutReviewInput, ModelUncheckedUpdateWithoutReviewInput>
    create: XOR<ModelCreateWithoutReviewInput, ModelUncheckedCreateWithoutReviewInput>
  }

  export type ModelUpdateWithWhereUniqueWithoutReviewInput = {
    where: ModelWhereUniqueInput
    data: XOR<ModelUpdateWithoutReviewInput, ModelUncheckedUpdateWithoutReviewInput>
  }

  export type ModelUpdateManyWithWhereWithoutReviewInput = {
    where: ModelScalarWhereInput
    data: XOR<ModelUpdateManyMutationInput, ModelUncheckedUpdateManyWithoutReviewInput>
  }

  export type ModelScalarWhereInput = {
    AND?: ModelScalarWhereInput | ModelScalarWhereInput[]
    OR?: ModelScalarWhereInput[]
    NOT?: ModelScalarWhereInput | ModelScalarWhereInput[]
    id?: StringFilter<"Model"> | string
    stage?: EnumStageFilter<"Model"> | $Enums.Stage
    status?: EnumStatusFilter<"Model"> | $Enums.Status
    marks?: StringNullableFilter<"Model"> | string | null
    comments?: StringNullableFilter<"Model"> | string | null
    createdAt?: DateTimeFilter<"Model"> | Date | string
    updatedAt?: DateTimeFilter<"Model"> | Date | string
    reviewId?: StringFilter<"Model"> | string
  }

  export type FinalUpsertWithWhereUniqueWithoutReviewInput = {
    where: FinalWhereUniqueInput
    update: XOR<FinalUpdateWithoutReviewInput, FinalUncheckedUpdateWithoutReviewInput>
    create: XOR<FinalCreateWithoutReviewInput, FinalUncheckedCreateWithoutReviewInput>
  }

  export type FinalUpdateWithWhereUniqueWithoutReviewInput = {
    where: FinalWhereUniqueInput
    data: XOR<FinalUpdateWithoutReviewInput, FinalUncheckedUpdateWithoutReviewInput>
  }

  export type FinalUpdateManyWithWhereWithoutReviewInput = {
    where: FinalScalarWhereInput
    data: XOR<FinalUpdateManyMutationInput, FinalUncheckedUpdateManyWithoutReviewInput>
  }

  export type FinalScalarWhereInput = {
    AND?: FinalScalarWhereInput | FinalScalarWhereInput[]
    OR?: FinalScalarWhereInput[]
    NOT?: FinalScalarWhereInput | FinalScalarWhereInput[]
    id?: StringFilter<"Final"> | string
    stage?: EnumStageFilter<"Final"> | $Enums.Stage
    status?: EnumStatusFilter<"Final"> | $Enums.Status
    marks?: StringNullableFilter<"Final"> | string | null
    comments?: StringNullableFilter<"Final"> | string | null
    createdAt?: DateTimeFilter<"Final"> | Date | string
    updatedAt?: DateTimeFilter<"Final"> | Date | string
    reviewId?: StringFilter<"Final"> | string
  }

  export type ProjectUpsertWithoutReviewInput = {
    update: XOR<ProjectUpdateWithoutReviewInput, ProjectUncheckedUpdateWithoutReviewInput>
    create: XOR<ProjectCreateWithoutReviewInput, ProjectUncheckedCreateWithoutReviewInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutReviewInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutReviewInput, ProjectUncheckedUpdateWithoutReviewInput>
  }

  export type ProjectUpdateWithoutReviewInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutProjectsNestedInput
    students?: StudentUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutReviewInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffId?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutStaffInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentCreateNestedManyWithoutProjectInput
    review?: ReviewCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutStaffInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutProjectInput
    review?: ReviewUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutStaffInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutStaffInput, ProjectUncheckedCreateWithoutStaffInput>
  }

  export type ProjectCreateManyStaffInputEnvelope = {
    data: ProjectCreateManyStaffInput | ProjectCreateManyStaffInput[]
  }

  export type ProjectUpsertWithWhereUniqueWithoutStaffInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutStaffInput, ProjectUncheckedUpdateWithoutStaffInput>
    create: XOR<ProjectCreateWithoutStaffInput, ProjectUncheckedCreateWithoutStaffInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutStaffInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutStaffInput, ProjectUncheckedUpdateWithoutStaffInput>
  }

  export type ProjectUpdateManyWithWhereWithoutStaffInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutStaffInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    staffId?: StringFilter<"Project"> | string
  }

  export type ProjectCreateWithoutStudentsInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutProjectsInput
    review?: ReviewCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutStudentsInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    staffId: string
    review?: ReviewUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutStudentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutStudentsInput, ProjectUncheckedCreateWithoutStudentsInput>
  }

  export type ProjectUpsertWithoutStudentsInput = {
    update: XOR<ProjectUpdateWithoutStudentsInput, ProjectUncheckedUpdateWithoutStudentsInput>
    create: XOR<ProjectCreateWithoutStudentsInput, ProjectUncheckedCreateWithoutStudentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutStudentsInput, ProjectUncheckedUpdateWithoutStudentsInput>
  }

  export type ProjectUpdateWithoutStudentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutProjectsNestedInput
    review?: ReviewUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutStudentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffId?: StringFieldUpdateOperationsInput | string
    review?: ReviewUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ReviewCreateWithoutReviewZeroInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutReviewZeroInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutReviewZeroInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewZeroInput, ReviewUncheckedCreateWithoutReviewZeroInput>
  }

  export type ReviewUpsertWithoutReviewZeroInput = {
    update: XOR<ReviewUpdateWithoutReviewZeroInput, ReviewUncheckedUpdateWithoutReviewZeroInput>
    create: XOR<ReviewCreateWithoutReviewZeroInput, ReviewUncheckedCreateWithoutReviewZeroInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewZeroInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewZeroInput, ReviewUncheckedUpdateWithoutReviewZeroInput>
  }

  export type ReviewUpdateWithoutReviewZeroInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewZeroInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateWithoutReviewOneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutReviewOneInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutReviewOneInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewOneInput, ReviewUncheckedCreateWithoutReviewOneInput>
  }

  export type ReviewUpsertWithoutReviewOneInput = {
    update: XOR<ReviewUpdateWithoutReviewOneInput, ReviewUncheckedUpdateWithoutReviewOneInput>
    create: XOR<ReviewCreateWithoutReviewOneInput, ReviewUncheckedCreateWithoutReviewOneInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewOneInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewOneInput, ReviewUncheckedUpdateWithoutReviewOneInput>
  }

  export type ReviewUpdateWithoutReviewOneInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewOneInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateWithoutReviewTwoInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutReviewTwoInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutReviewTwoInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewTwoInput, ReviewUncheckedCreateWithoutReviewTwoInput>
  }

  export type ReviewUpsertWithoutReviewTwoInput = {
    update: XOR<ReviewUpdateWithoutReviewTwoInput, ReviewUncheckedUpdateWithoutReviewTwoInput>
    create: XOR<ReviewCreateWithoutReviewTwoInput, ReviewUncheckedCreateWithoutReviewTwoInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewTwoInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewTwoInput, ReviewUncheckedUpdateWithoutReviewTwoInput>
  }

  export type ReviewUpdateWithoutReviewTwoInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewTwoInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateWithoutReviewThreeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutReviewThreeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutReviewThreeInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewThreeInput, ReviewUncheckedCreateWithoutReviewThreeInput>
  }

  export type ReviewUpsertWithoutReviewThreeInput = {
    update: XOR<ReviewUpdateWithoutReviewThreeInput, ReviewUncheckedUpdateWithoutReviewThreeInput>
    create: XOR<ReviewCreateWithoutReviewThreeInput, ReviewUncheckedCreateWithoutReviewThreeInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewThreeInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewThreeInput, ReviewUncheckedUpdateWithoutReviewThreeInput>
  }

  export type ReviewUpdateWithoutReviewThreeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewThreeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateWithoutReviewModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutReviewModelInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewFinal?: FinalUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutReviewModelInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewModelInput, ReviewUncheckedCreateWithoutReviewModelInput>
  }

  export type ReviewUpsertWithoutReviewModelInput = {
    update: XOR<ReviewUpdateWithoutReviewModelInput, ReviewUncheckedUpdateWithoutReviewModelInput>
    create: XOR<ReviewCreateWithoutReviewModelInput, ReviewUncheckedCreateWithoutReviewModelInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewModelInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewModelInput, ReviewUncheckedUpdateWithoutReviewModelInput>
  }

  export type ReviewUpdateWithoutReviewModelInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewModelInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateWithoutReviewFinalInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reviewZero?: ZeroCreateNestedManyWithoutReviewInput
    reviewOne?: OneCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeCreateNestedManyWithoutReviewInput
    reviewModel?: ModelCreateNestedManyWithoutReviewInput
    project?: ProjectCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutReviewFinalInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    reviewZero?: ZeroUncheckedCreateNestedManyWithoutReviewInput
    reviewOne?: OneUncheckedCreateNestedManyWithoutReviewInput
    reviewTwo?: TwoUncheckedCreateNestedManyWithoutReviewInput
    reviewThree?: ThreeUncheckedCreateNestedManyWithoutReviewInput
    reviewModel?: ModelUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutReviewFinalInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewFinalInput, ReviewUncheckedCreateWithoutReviewFinalInput>
  }

  export type ReviewUpsertWithoutReviewFinalInput = {
    update: XOR<ReviewUpdateWithoutReviewFinalInput, ReviewUncheckedUpdateWithoutReviewFinalInput>
    create: XOR<ReviewCreateWithoutReviewFinalInput, ReviewUncheckedCreateWithoutReviewFinalInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewFinalInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewFinalInput, ReviewUncheckedUpdateWithoutReviewFinalInput>
  }

  export type ReviewUpdateWithoutReviewFinalInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    project?: ProjectUpdateOneWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewFinalInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type StudentCreateManyProjectInput = {
    id?: string
    fullName: string
    regNo: string
    email: string
    batch: string
    password: string
    phoneNo: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyProjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateWithoutProjectInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateWithoutProjectInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyWithoutProjectInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    regNo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutProjectInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutProjectInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewZero?: ZeroUncheckedUpdateManyWithoutReviewNestedInput
    reviewOne?: OneUncheckedUpdateManyWithoutReviewNestedInput
    reviewTwo?: TwoUncheckedUpdateManyWithoutReviewNestedInput
    reviewThree?: ThreeUncheckedUpdateManyWithoutReviewNestedInput
    reviewModel?: ModelUncheckedUpdateManyWithoutReviewNestedInput
    reviewFinal?: FinalUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutProjectInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZeroCreateManyReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OneCreateManyReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwoCreateManyReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThreeCreateManyReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ModelCreateManyReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinalCreateManyReviewInput = {
    id?: string
    stage?: $Enums.Stage
    status?: $Enums.Status
    marks?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZeroUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZeroUncheckedUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZeroUncheckedUpdateManyWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OneUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OneUncheckedUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OneUncheckedUpdateManyWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoUncheckedUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwoUncheckedUpdateManyWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreeUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreeUncheckedUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThreeUncheckedUpdateManyWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModelUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModelUncheckedUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ModelUncheckedUpdateManyWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinalUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinalUncheckedUpdateWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinalUncheckedUpdateManyWithoutReviewInput = {
    stage?: EnumStageFieldUpdateOperationsInput | $Enums.Stage
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    marks?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyStaffInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateWithoutStaffInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutProjectNestedInput
    review?: ReviewUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutStaffInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutProjectNestedInput
    review?: ReviewUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutStaffInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewCountOutputTypeDefaultArgs instead
     */
    export type ReviewCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffCountOutputTypeDefaultArgs instead
     */
    export type StaffCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffDefaultArgs instead
     */
    export type StaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZeroDefaultArgs instead
     */
    export type ZeroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZeroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OneDefaultArgs instead
     */
    export type OneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OneDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TwoDefaultArgs instead
     */
    export type TwoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TwoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThreeDefaultArgs instead
     */
    export type ThreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThreeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModelDefaultArgs instead
     */
    export type ModelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FinalDefaultArgs instead
     */
    export type FinalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FinalDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}